"functions":
- "name": "JxlEncoderFlushInput"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "JxlEncoderStatus JxlEncoderFlushInput(JxlEncoder *)"
- "name": "_ZN3jxl4test10DecodeFileENS_6extras19JXLDecompressParamsENS_4SpanIKhEEPNS_10CodecInOutEPNS_10ThreadPoolE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": "file"
    "type": "bool "
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "Status jxl::test::DecodeFile(struct JXLDecompressParams, const Span<const unsigned char>, DW_TAG_restrict_typeCodecInOut *, ThreadPool *)"
- "name": "_ZZN3jxl4jpeg14EncodeJPEGDataEP22JxlMemoryManagerStructRNS0_8JPEGDataEPNSt3__16vectorIhNS5_9allocatorIhEEEERKNS_14CompressParamsEENK3$_0clERKS9_b"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool"
  "return_type": "int"
  "signature": "Status jxl::jpeg::operator()(const void *, const vector<unsigned char, std::__1::allocator<unsigned char> > &, bool)"
- "name": "_ZN3jxl4test9TestImage15DecodeFromBytesERKNSt3__16vectorIhNS2_9allocatorIhEEEE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "Status jxl::test::TestImage::DecodeFromBytes(const vector<unsigned char, std::__1::allocator<unsigned char> > &)"
- "name": "_ZN3jxl4test9RoundtripEPNS_10CodecInOutERKNS_14CompressParamsENS_6extras19JXLDecompressParamsES2_RNSt3__118basic_stringstreamIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEPmPNS_10ThreadPoolE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "bool"
  "signature": "bool jxl::test::Roundtrip(CodecInOut *, const struct CompressParams &, struct JXLDecompressParams, DW_TAG_restrict_typeCodecInOut *, stringstream &, size_t *, ThreadPool *)"
- "name": "BrotliEncoderCompress"
  "params":
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "int"
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "int BrotliEncoderCompress(int, int, BrotliEncoderMode, size_t, const uint8_t *, size_t *, uint8_t *)"
- "name": "_ZN3jxl19ModularFrameEncoder16EncodeQuantTableEP22JxlMemoryManagerStructmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "size_t"
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "Status jxl::ModularFrameEncoder::EncodeQuantTable(JxlMemoryManager *, size_t, size_t, struct BitWriter *, const QuantEncoding &, size_t, ModularFrameEncoder *)"
- "name": "_ZN3jxl6extras17ChunkedPNMDecoder4InitEPKc"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "StatusOr<jxl::extras::ChunkedPNMDecoder> jxl::extras::ChunkedPNMDecoder::Init(const char *)"
- "name": "_ZN3jxl4test16Butteraugli3NormERKNS_6extras15PackedPixelFileES4_PNS_10ThreadPoolE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "float"
  "signature": "float jxl::test::Butteraugli3Norm(const PackedPixelFile &, const PackedPixelFile &, ThreadPool *)"
- "name": "_ZN3jxl4test27GetCompressedIccTestProfileEv"
  "params":
  - "name": ""
    "type": "bool "
  "return_type": "void"
  "signature": "vector<unsigned char, std::__1::allocator<unsigned char> > GetCompressedIccTestProfile()"
- "name": "_ZN3jxl6extras14EncodeImageJXLERKNS0_17JXLCompressParamsERKNS0_15PackedPixelFileEPKNSt3__16vectorIhNS7_9allocatorIhEEEEPSB_"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "bool"
  "signature": "bool jxl::extras::EncodeImageJXL(const struct JXLCompressParams &, const PackedPixelFile &, const vector<unsigned char, std::__1::allocator<unsigned char> > *, vector<unsigned char, std::__1::allocator<unsigned char> > *)"
- "name": "_ZN3jxl4test9RoundtripERKNS_6extras15PackedPixelFileERKNS1_17JXLCompressParamsENS1_19JXLDecompressParamsEPNS_10ThreadPoolEPS2_"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "size_t"
  "signature": "size_t jxl::test::Roundtrip(const PackedPixelFile &, const struct JXLCompressParams &, struct JXLDecompressParams, ThreadPool *, PackedPixelFile *)"
- "name": "_ZN3jxl4test10EncodeFileERKNS_14CompressParamsEPNS_10CodecInOutEPNSt3__16vectorIhNS6_9allocatorIhEEEEPNS_10ThreadPoolE"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  "return_type": "int"
  "signature": "Status jxl::test::EncodeFile(const struct CompressParams &, CodecInOut *, vector<unsigned char, std::__1::allocator<unsigned char> > *, ThreadPool *)"
- "name": "JxlEncoderAddJPEGFrame"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "size_t"
  "return_type": "int"
  "signature": "JxlEncoderStatus JxlEncoderAddJPEGFrame(const JxlEncoderFrameSettings *, const uint8_t *, size_t)"
- "name": "JxlEncoderAddChunkedFrame"
  "params":
  - "name": ""
    "type": "bool "
  - "name": ""
    "type": "int"
  - "name": "chunked_frame_input"
    "type": "bool "
  "return_type": "int"
  "signature": "JxlEncoderStatus JxlEncoderAddChunkedFrame(const JxlEncoderFrameSettings *, int, struct JxlChunkedFrameInputSource)"
"language": "c++"
"project": "libjxl"
"target_name": "color_encoding_fuzzer"
"target_path": "/src/libjxl/tools/color_encoding_fuzzer.cc"
