functions:
- void std::__1::tuple<unsigned int, immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>,
  immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy,
  false, true>, 2u, 2u>*, unsigned int, immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>,
  immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy,
  false, true>, 2u, 2u>*> immer::detail::rbts::slice_right_mut_visitor<immer::detail::rbts::node<int,
  immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy,
  immer::no_lock_policy, immer::no_transience_policy, false, true>, 2u, 2u>, true,
  true>::visit_regular<immer::detail::rbts::regular_pos<immer::detail::rbts::node<int,
  immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy,
  immer::no_lock_policy, immer::no_transience_policy, false, true>, 2u, 2u> >&>(std::tuple
  * pos, struct immer::detail::rbts::regular_sub_pos * last, size_t e)
- void decltype(std::tuple * p, struct immer::detail::rbts::regular_sub_pos * v, size_t
  idx, int offset_hint, int count_hint, struct immer::detail::rbts::dec_visitor *
  args)
- void decltype(std::tuple * this, struct immer::detail::rbts::regular_sub_pos * v,
  size_t * args, struct immer::detail::rbts::dec_visitor * args)
- void decltype(std::tuple * this, struct immer::detail::rbts::regular_sub_pos * v,
  size_t idx, int offset_hint, struct immer::detail::rbts::dec_visitor * args)
- void decltype(struct immer::detail::rbts::concat_center_pos * this, struct immer::detail::rbts::relaxed_pos
  * v, struct std::__cxx_atomic_base_impl * args, struct std::__cxx_atomic_base_impl
  * args, struct immer::detail::rbts::leaf_pos * args, struct std::__cxx_atomic_base_impl
  * args, struct immer::detail::rbts::leaf_sub_pos * args)
project: immer
target_name: vector
target_path: /src/immer/extra/fuzzer/vector.cpp

