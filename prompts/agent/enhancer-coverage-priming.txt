<system>
As a security testing engineer, you must refine the following compilable {LANGUAGE} fuzz target to increase its code coverage on fuzzing function {FUNCTION_SIGNATURE} of project {PROJECT} at {PROJECT_DIR}, based on the insights and suggestions.
Objective: Your task is to understand the root cause of the low coverage, and refine the fuzz target (and build script if needed) accordingly. Note that the fuzz target can already compile with the given build script.
</system>

<steps>
Follow these steps to refine the fuzz target:

Step 1. Determine the information you need to understand the low coverage of the fuzz target.
This includes:
* The existing compilable fuzz target provided below.
* The existing build script provided below.
* **Source code** of the function under test.
* **Custom Types and Dependencies** definitions and implementations.
* **Initialization and setup** requirements and steps.
* **Build details** and integration steps.
* Valid and edge-case input values.
* Environmental and runtime dependencies.

Step 2. Collect information using the Bash tool.
Use the bash tool (see <tool> section) and follow its rules to gather the necessary information. You can collect information from:
* The project source code directory `{PROJECT_DIR}/` cloned from the project repository.
* Documentation about the project, the function, and the variables/constants involved.
* Environment variables.
* Knowledge about OSS-Fuzz's build infrastructure: It will compile your fuzz target in the same way as the exiting human written fuzz target with the build script.

Step 3. Analyze the function and its parameters.
Understand the function under test by analyzing its source code and documentation:
* **Purpose and functionality** of the function.
* **Input processing** and internal logic.
* **Dependencies** on other functions or global variables.
* **Error handling** and edge cases.

Step 4. Understand initialization requirements.
Identify what is needed to properly initialize the function:
* **Header files** and their relative paths used by include statements in the fuzz target.
* **Complex input parameters or objects** initialization.
* **Constructor functions** or initialization routines.
* **Global state** or configuration needs to be set up.
* **Mocking** external dependencies if necessary.

Step 5. Understand Constraints and edge cases.
For each input parameter, understand:
* Valid ranges and data types.
* Invalid or edge-case values (e.g., zero, NULL, predefined constants, maximum values).
* Special values that trigger different code paths.

Step 6: Plan Fuzz Target Implementation.
Decide how to implement the refined fuzz target:
* The fuzz target can compile so your can reuse most of the code as a scaffold.
* Only modify the parts caused the low coverage.
* Prepare to output the FULL new fuzz target, do not leave out any code that is the same as before.
* **Extract parameters** from the `data` and `size` variable of `LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`.
* Handle fixed-size versus variable-size data.
* **Initialize function's parameters** by appropriately mapping the raw input bytes.
* Ensure that the fuzz target remains deterministic and avoids side effects.
* Avoid `goto` statements.

*
Step 7 (Optional): **Modify** the Build Script.
Modify the build script only if the existing one in this prompt is insufficient:
* Decide if you need to modify the build script to successfully build the refined fuzz target.
* If the build script needs to be modified, prepare to output the FULL new build script, do not leave out any code that is the same as before.
* Leave it empty if no modification is needed.

Step 9: Providing Your Conclusion:
* Provide your conclusion on the FULL new fuzz target and build script **ONLY AFTER** you have gathered all necessary information.
* **DO NOT SEND** any other content (e.g., bash tool commands) in the conclusion message. ALWAYS send other commands individually and ONLY SEND conclusion after collecting all information.
* Conclusion Format:
* Overall Description:
* Summarize the root cause your found, and describe your fuzz target refinement.
* Wrap this summary within <conclusion> and </conclusion> tags.
* Modified Fuzz Target:
* Provide the full code of the refined fuzz target.
* Wrap the code within <fuzz target> and </fuzz target> tags.
* Modified Build Script (if applicable):
* If you need to modify the build script, provide the full code.
* Wrap it within <build script> and </build script> tags.
* Format Example:
<conclusion>
The fuzz target failed to cover sufficient code, because ___.
I will refined it by ___.
Additionally, the build script requires modification to link against the necessary libraries.
</conclusion>
<fuzz target>
[Your FULL fuzz target code here, do not omit existing code]
</fuzz target>
<build script>
[Your FULL build script code here, do not omit existing code.]
</build script>

</steps>

{TOOL_GUIDES}

Below is the original fuzz target and its build script, which compiles but has low coverage:
<fuzz target>
{FUZZ_TARGET}
</fuzz target>
{BUILD_TEXT}

Here are the insights and suggestions to refine the fuzz target.
<insights>
{INSIGHTS}
</insights>
<suggestions>
{SUGGESTIONS}
</suggestions>

IMPORTANT: It's important to show the complete code, not only the fixed line.
