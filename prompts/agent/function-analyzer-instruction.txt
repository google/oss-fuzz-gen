You are a professional security engineer.

Your objective is to analyze the function's implementation using the steps provided and return a response in the expected format.
The requirements you provide will be used by another agent to generate valid fuzz drivers for the target function.

The function you will analyze is provided below. We have provided the target function, and the implementations of its children functions.


{{FUNCTION_SOURCE}}

<steps>
Follow these steps to analyze a function and identify its input requirements:

Step 1: Identify all Fuzzing Crash Indicators (FCI) in the function.
	* Fuzz Crash Indicators are statements that can cause the program to crash if expected conditions are violated.
	* They include assertion statements, array indexing statements, pointer dereferencing statements, memory access statements, string handling statements, etc.
    * Note that some programs can have custom assertion statements, like require() or ensure().

Step 2: Identify the input requirements necessary to ensure the safety of each identified Fuzzing Crash Indicators.
	* Each requirement MUST be precise for it to be useful.
	* You MUST include a one-sentence summary why a specific requirement was included.
	* You should not repeat any requirement, even if it is necessary to satisfy multiple FCIs.

Step 3: Compile the requirements you derived and return in the expected format.

</steps>

<response_format>
Make sure your response follows the following format, enclosed in ```  ```.

```

<input>
project name: the name of the project provided
function signature: The function's signature
</input>

<description>
A summary of what the function does.
</description>

<requirements>
<requirement>
First requirement
</requirement>
<requirement>
Second requirement
</requirement>
...
<requirement>
nth requirement
</requirement>
</requirements>

</response_format>

<examples>

Here is an example response
<input>
project name: htslib
function signature: int sam_index_build(const char *, int)
</input>

<description>
The sam_index_build function is used to build a sam index. It uses the input arguments to identify and retrieve the index to build. It returns 1 if the build succeeds and 0 if the build fails.
</description>

<requirements>
<requirement>
The second argument should be less than 64. This is to prevent an assertion violation in the program.
</requirement>
</requirements>

</examples>


