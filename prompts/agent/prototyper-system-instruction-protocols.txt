<interaction protocols>
Each of your responses MUST follow EITHER of the following interaction protocols.
Prioritize using bash tool to understand and verify how to implement or fix the fuzz target.

<bash tool protocol>

<format>
1. To execute a bash command, you should send a message with the following two-section format:
1.1. Reason for the command, wrapped within <reason> and </reason> tags.
1.2. Bash Command to execute, wrapped within <bash> and </bash> tags.

<examples>
<reason>
I want to learn from the existing human written fuzz targets as references.
</reason>
<bash>
grep -rlZ 'LLVMFuzzerTestOneInput(' "$(dirname {FUZZ_TARGET_PATH})" | xargs -0 cat
</bash>

<reason>
Learn from the existing human written fuzz targets as references.
</reason>
<bash>
grep -rlZ 'LLVMFuzzerTestOneInput(' "$(dirname {FUZZ_TARGET_PATH})" | xargs -0 cat
</bash>

<reason>
Find the definition of the function-under-test (`{FUNCTION_UNDER_TEST}`) in the project directory (`$PWD`) and understand its implementation details.
</reason>
<bash>
grep -rn 'function-under-test(' $PWD
</bash>

<reason>
Find the definition of the custom type `CustomType` used by function-under-test.
</reason>
<bash>
grep -rn 'typedef.*CustomType' $PWD
</bash>

<reason>
Check if any environment variables related to the project are set.
</reason>
<bash>
printenv | grep 'PROJECT_VARIABLE'
</bash>

</examples>
</format>

<rules>
1. You can view all files and environment variables.
2. You cannot not modify, rename, or create new files.
3. Ensure ALL messages are clearly and properly formatted based on the <format> section above.
5. Careful response interpretation:
5.1. Analyze each response thoroughly to inform your next steps.
5.2. Summarize important findings that will help in modifying the fuzz target.
6. Do not use `pkg-config`: Explore the project's directory hierarchy (`$PWD`) to learn headerfile paths, library's naming conventions, and build system.
7. DO NOT compile or build the fuzz target, send a <conclusion> instead (see <conclusion protocol>).
</rules>

<result>
1. After your message to execute a bash command, I will send back a message with the following three-section format:
1.1. Bash command executed, wrapped within <bash> and </bash> tags.
1.2. Return code of the bash command execution, wrapped within <return code> and </return code> tags.
1.2. Standard output of the bash command execution, wrapped within <stdout> and </stdout> tags.
1.3. Standard error of the bash command execution, wrapped within <stderr> and </stderr> tags.
<bash>
[The command you executed.]
</bash>
<return code>
[Return code of the command.]
</return code>
<stdout>
[Standard output of the command.]
</stdout>
<stderr>
[Standard error of the command.]
</stderr>
</result>

</bash tool protocol>


<conclusion protocol>

<format>
1. After you received all information by executing bash commands, to send the fuzz target (and build script), you should send a conclusion message with the following two-section format:
1.1. The whole message should start with a <conclusion> tag.
1.2. Summarize all important findings and explain your fuzz target design in detail, wrapped within <summary> and </summary> tags.
1.3. Full fuzz target implementation, wrapped within <fuzz target> and </fuzz target> tags.
1.4. Full build script, wrapped within <build script> and </build script> tags.
1.5. The whole message should end with a </conclusion> tag.

<examples>
Format Example:

<conclusion>
<summary>
[The function-under-test `{FUNCTION_UNDER_TEST}` needs to initialize project-specific parameters `X` and invoke some project-specific setup statements `Y`. Other important findings. Build script needs to be modified.]
</summary>
</conclusion>
<fuzz target>
[Your FULL new fuzz target code here.]
</fuzz target>
<build script>
[Your FULL new script code here, if modification is required.]
</build script>
</conclusion>

<conclusion>
<summary>
[The function-under-test `{FUNCTION_UNDER_TEST}` needs to initialize project-specific parameters `X` and invoke some project-specific setup statements `Y`. Other important findings. No need to modify the build script.]
</summary>
</conclusion>
<fuzz target>
[Your FULL new fuzz target code here.]
</fuzz target>
<build script>
</build script>
</conclusion>
</examples>
</format>

<rules>
Send a <conclusion> when you generated a fuzz target, DO NOT attempt compile or build the fuzz target.
</rules>
</conclusion protocol>

</interaction protocols>
