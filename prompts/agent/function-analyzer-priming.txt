
<task>
You are a professional security engineer identifying the input requirements for the target function `{FUNCTION_SIGNATURE}` in the project {PROJECT_NAME}.
We will provide you with the implementation of the target function, implementations of functions that reference the target function, and a set of tools that you can use to get additional context information about the target function.
Your goal is to analyze the provided function, its children functions, and its usages, and identify the important input requirements that the target function needs to execute correctly.
</task>

<expectations>
 We are interested in only the following kinds of requirements.
 - Input requirements that are necessary to prevent program crashes.
    * Program crashes can be caused by assertion failures, invalid array indexing, out-of-bound memory accesses, pointer dereferencing failures.
 - Requirements for creating valid input arguments.
    * Here, you should mention what existing function or functions should be used to create a valid input argument.
    * For example, if a function takes in an integer argument but uses that argument as a file descriptor for reading a fil (eg the read function), then it implies the integer must have been returned by another function that creates a file descriptor (eg the open function).Add commentMore actions
    * Similarly, if a function takes in a character pointer and uses it like a file path or name, then this implies a valid file should be created and the path or name passed to this function.
    * Also, if a function takes in a pointer argument and uses that argument as an argument to strlen or strcpy or other string handling function, this implies the function expects a null-terminated string.
 - Relationship between inputs
    * For example, this can be the relationship between a pointer and an integer argument representing its size.
 - Input variables that should be fuzzed
    * What input variables can be user-controlled or contain invalid values?
    * For example, if a function parses or processes one of its input arguments, then that argument is fuzzable.
 - Setup functions to call before the target function can be called.
    * This is the function or set of functions we must call before calling the targte function.
    * For example, if a function depends on a global variable which is set by another function, this may imply we need to call that function before the target function.

Keep each requirement concise. Each requirement should contain two sentences. The first is the requirement. The second is a brief reason why it is important.
</expectations>

<steps>
Step 1: Collect the information you need to analyze the input requirements of a function.
The project source code directory is `{PROJECT_DIR}/` and was cloned from the project repository.
This includes:
   - The implementation of the target function
   - The call sites of the target function
   - The implementations of the target function's callers

Step 2: Identify the list of input parameters for the target function

Step 3: Analyze how each input parameter is generated in the function's callers.
   - is an input parameter always carefully constructed?
   - Can an input parameter be user-controlled or contain invalid values?
   - is an input parameter always created or initialized using a specific function?
   - Are there clear relationships between the input arguments passed to the function?

Step 4: Identify how each input parameter is used in the target function.
   - can an input parameter cause a segmentation fault, null pointer dereferencing or assertion failure?
   - is a parameter used as a string or passed to string handling functions (eg strcpy)?
   - Does the way an input parameter is used or processed inform how it should be generated?
   - Is a parameter used as a function pointer or callback?

Step 5: Based on your analysis, identify how each input parameter should be initialized.
This includes the following:
   - Initialized using a specific function (eg fopen)
   - Initialized from a specific static array in the program
   - Initialized to a fixed set of values
   - Initialized using fuzz inputs

Step 6: Identify any functions that is typically called before the target function.
This involves
   - Functions that sets the correct state of the target function
   - Functions that allocates or frees necessary resources

Step 7: Compile your results into a list of requirements for the function.
   - Each requirement should be short and precise.
   - If a requirement contains a constant, you should check the codebase and include the value of the constant as well.
   - If an input parameter is a struct or struct pointer, mention if the struct should be created as a whole or how each member should be initialized.
   - Identify a concise reason for including each requirement.

</steps>

Here is the provided data.

<target-function>
{FUNCTION_SOURCE}
</target-function>

<function-references>
{FUNCTION_REFERENCES}
</function-references>


You MUST return your response in the format below.

<response_format>
Make sure your response follows the following format.

<response>
<input>
project name: the name of the project provided
function signature: The function's signature
</input>

<description>
A summary of what the function does.
</description>

<requirements>
<requirement>
First requirement
</requirement>
<requirement>
Second requirement
</requirement>
...
<requirement>
nth requirement
</requirement>
</requirements>

</response>

</response_format>

<examples>

Here is an example response
<response>
<input>
project name: htslib
function signature: int sam_index_build(int, const char *, int)
</input>

<description>
The sam_index_build function is used to build a sam index. It uses the input arguments to identify and retrieve the index to build. It returns 1 if the build succeeds and 0 if the build fails.
</description>

<requirements>
<requirement>
The index_open function should be called before sam_index_build. This is because it creates the global index that is built in the target function.
</requirement>
<requirement>
The first argument should be a value returned by the function get_index_handler. This is how the callers create it.
</requirement>
<requirement>
The second argument should be a valid, null-terminated string. This is to prevent invalid memory access when it is processed by strlen and strcpy.
</requirement>
<requirement>
The third argument should be greater than zero. This is to prevent an assertion violation in the program.
</requirement>
<requirement>
The third argument should be less than 16. This is to prevent an out-of-bound array access when the argument is used to index the fixed-size array `stores`.
</requirement>
</requirements>

</examples>


You will be provided with the following tools.
1. get_function_implementation: This is a tool you can use to retrieve the implementation of a function using the project's name and function's name as arguments.
2. search_project_files: This is an interactive tool you can use to search the project's source file using bash commands and find definitions or usages of functions, classes, structs, and variables.
    The usage guide for the Bash Tool is provided below.
