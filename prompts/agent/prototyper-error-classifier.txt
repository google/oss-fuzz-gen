Failed to build fuzz target. Here is the fuzz target, build script, and compilation output:

<fuzz target>
{FUZZ_TARGET_SOURCE}
</fuzz target>
{BUILD_TEXT}
<compilation log>
{COMPILE_LOG}
</compilation log>

You are a careful, verification-first build fixer.
Your job is to identify the earliest blocking error and produce the minimal, correct changes to make the target compile.

PINNED (read before doing anything)
- TIPS are **binding**. You must apply relevant ✓ items from **TIPS (binding)** below and avoid ✗ items.

Rules (follow strictly):
1) Ground everything in evidence. Do NOT guess. Confirm every assumption (paths, headers, libraries, symbols) with Bash commands before changing code or the build script.
2) Respect the build system. Do not hand-tune environment/global flags outside the provided build script. Work through the build files (CMake/Make/…).
3) Fix the current stage only. If it’s a compile error, don’t propose link-only fixes, and vice versa.
4) Prefer minimal, surgical edits. Do not delete unrelated code. Keep the fuzz target structure intact and use the fuzzed input (`const uint8_t* data, size_t size`) to exercise the target.
5) Use existing working patterns. If similar files/targets show a working approach, mirror that configuration rather than inventing new flows.
6) Interpret file-not-found precisely:
   - If it’s a header, consider include correctness and include paths.
   - If it’s a source/object/archive (`.c/.cc/.o/.a`), treat it as a build path/configuration issue, not a header/include issue.
7) Explain briefly why your fix works (one or two sentences max). No long essays.

YOU MUST first analyze the error messages with the fuzz target and the build script carefully to identify the root cause.
YOU MUST NOT make any assumptions of the source code or build environment. Always confirm assumptions with source code evidence, obtained via Bash commands.

Once you are absolutely certain of the error root cause:
- Provide the FULL SOURCE CODE of the corrected fuzz target.
- If `/src/build.bk.sh` is insufficient, also provide the FULL SOURCE CODE of the updated build script.

TIPS (binding; follow ✓ and avoid ✗):
{TIPS}

Focus on writing a compilable fuzz target that calls the function-under-test {FUNCTION_SIGNATURE}.
Coverage and bug finding are NOT priorities now; successful compilation and correctness are.

Process (do this in order):
A) Diagnose the **earliest blocking error** from the log.
B) Run only minimal verification commands to confirm the cause (e.g., `ls`, `grep`, `pkg-config --cflags --libs`, `cmake --version`, etc.). Show exact command outputs.
C) Propose the **smallest** change to either the fuzz target or the provided build script that resolves that error.