{
  "data_mapping": {
    "methods_for_generating_random_data": [
      {
        "argument_types": ["int", "java.lang.Integer"],
        "methods": [
          "FuzzedDataProvider::consumeInt()",
          "FuzzedDataProvider::consumeInt(int, int)",
          "FuzzedDataProvider::pickValue(int[])"
        ]
      },
      {
        "argument_types": ["int[]"],
        "methods": [
          "FuzzedDataProvider::consumeInts(int)",
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)"
        ]
      },
      {
        "argument_types": ["java.lang.Integer[]"],
        "methods": ["new Integer[]{int...}"]
      },
      {
        "argument_types": ["boolean", "java.lang.Boolean"],
        "methods": [
          "FuzzedDataProvider::consumeBoolean()",
          "FuzzedDataProvider::pickValue(boolean[])"
        ]
      },
      {
        "argument_types": ["boolean[]"],
        "methods": [
          "FuzzedDataProvider::consumeBooleans(int)",
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)"
        ]
      },
      {
        "argument_types": ["java.lang.Boolean[]"],
        "methods": ["new Boolean[]{boolean...}"]
      },
      {
        "argument_types": ["byte", "java.lang.Byte"],
        "methods": [
          "FuzzedDataProvider::consumeByte()",
          "FuzzedDataProvider::consumeByte(byte, byte)",
          "FuzzedDataProvider::pickValue(byte[])"
        ]
      },
      {
        "argument_types": ["byte[]"],
        "methods": [
          "FuzzedDataProvider::consumeBytes(int)",
          "FuzzedDataProvider::consumeRemainingAsBytes()",
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)"
        ]
      },
      {
        "argument_types": ["java.lang.Byte[]"],
        "methods": ["new Byte[] {byte...}"]
      },
      {
        "argument_types": ["short", "java.lang.Short"],
        "methods": [
          "FuzzedDataProvider::consumeShort()",
          "FuzzedDataProvider::consumeShort(short, short)",
          "FuzzedDataProvider::pickValue(short[])"
        ]
      },
      {
        "argument_types": ["short[]"],
        "methods": [
          "FuzzedDataProvider::consumeShorts(int)",
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)"
        ]
      },
      {
        "argument_types": ["java.lang.Short[]"],
        "methods": ["new Short[] {short...}"]
      },
      {
        "argument_types": ["long", "java.lang.Long"],
        "methods": [
          "FuzzedDataProvider::consumeLong()",
          "FuzzedDataProvider::consumeLong(long, long)",
          "FuzzedDataProvider::pickValue(long[])"
        ]
      },
      {
        "argument_types": ["long[]"],
        "methods": [
          "FuzzedDataProvider::consumeLongs(int)",
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)"
        ]
      },
      {
        "argument_types": ["java.lang.Long[]"],
        "methods": ["new Long[] {long...}"]
      },
      {
        "argument_types": ["float", "java.lang.Float"],
        "methods": [
          "FuzzedDataProvider::consumeFloat()",
          "FuzzedDataProvider::consumeRegularFloat()",
          "FuzzedDataProvider::consumeRegularFloat(float, float)",
          "FuzzedDataProvider::consumeProbabilityFloat()",
          "FuzzedDataProvider::pickValue(float[])"
        ]
      },
      {
        "argument_types": ["double", "java.lang.Double"],
        "methods": [
          "FuzzedDataProvider::consumeDouble()",
          "FuzzedDataProvider::consumeRegularDouble()",
          "FuzzedDataProvider::consumeRegularDouble(double, double)",
          "FuzzedDataProvider::consumeProbabilityDouble()",
          "FuzzedDataProvider::pickValue(double[])"
        ]
      },
      {
        "argument_types": ["char", "java.lang.Character"],
        "methods": [
          "FuzzedDataProvider::consumeChar()",
          "FuzzedDataProvider::consumeCharNoSurrogates()",
          "FuzzedDataProvider::consumeChar(char, char)",
          "FuzzedDataProvider::pickValue(char[])"
        ]
      },
      {
        "argument_types": ["java.lang.String", "java.lang.CharSequence"],
        "methods": [
          "FuzzedDataProvider::consumeString(int)",
          "FuzzedDataProvider::consumeAsciiString(int)",
          "FuzzedDataProvider::consumeRemainingAsString()",
          "FuzzedDataProvider::consumeRemainingAsAsciiString()",
          "FuzzedDataProvider::pickValue(String[])"
        ]
      },
      {
        "argument_types": ["java.lang.String[]", "java.lang.CharSequence[]"],
        "methods": [
          "FuzzedDataProvider::pickValues(T[], int)",
          "FuzzedDataProvider::pickValues(Collection<T>, int)",
          "new String[]{java.lang.String}"
        ]
      }
    ],
    "requirements": [
      "If the argument types are found in the first column of the above table, you must use one of the methods in the second column of the same row to create random data of that argument type.",
      "Do not use any other methods to create the argument types that exist in the first column of this table.",
      "If the required arguments are instances of java.util.Collection<T> class or any of its subclasses, try creating the needed class and fill it with random data using any of the methods in the above table if the generic type of that argument matches.",
      "If the required argument is an array but it is not found in the first column of the above mapping table, please use the array initialization approach and fill it with a random number of data of the required argument types."
    ]
  }
}