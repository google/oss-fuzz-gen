{
  "language": "Java",
  "framework": "Jazzer",
  "requirements": {
    "input_variation": true,
    "complex_harness": true,
    "nested_loops": true,
    "wrap_with_tag": "<java_code>",
    "restrictions": {
      "forbidden_methods": ["java.lang.Random"],
      "forbidden_packages": ["java.lang.reflect"],
      "no_annotations": ["@FuzzTest"],
      "no_logging": true,
      "no_multithreading": true
    },
    "imports": {
      "necessary_only": true,
      "required_imports": "{IMPORT_STATEMENTS}",
      "optional_imports": "{OTHER_IMPORT_STATEMENTS}"
    },
    "object_creation": {
      "before_invocation": true,
      "avoid_variable_reuse": true
    },
    "class_name": "{HARNESS_NAME}",
    "resource_handling": {
      "invoke_close": true,
      "implements_auto_closeable": true
    },
    "exception_handling": "follow_examples",
    "method_invocation": {
      "public_methods": "{PUBLIC_METHODS}",
      "at_least_one": true
    },
    "public_classes": "{PUBLIC_CLASSES}",
    "template": {
      "structure": {
        "imports": ["import com.code_intelligence.jazzer.api.FuzzedDataProvider;"],
        "methods": {
          "fuzzerInitialize": "// Initializing objects for fuzzing",
          "fuzzerTearDown": "// Tear down objects after fuzzing",
          "fuzzerTestOneInput": "// Use the FuzzedDataProvider object to generate random data for fuzzing\n// Fuzz by invoking the target method with random parameters / objects generated above."
        }
      }
    },
    "data_generation": {
      "allowed_methods": [
        "consumeBytes(int length)",
        "consumeRemainingAsBytes()",
        "consumeString(int length)",
        "consumeRemainingAsString()",
        "consumeBoolean()",
        "consumeInt(int min, int max)",
        "consumeInt()",
        "consumeLong(long min, long max)",
        "consumeLong()",
        "consumeFloat(float min, float max)",
        "consumeFloat()",
        "consumeDouble(double min, double max)",
        "consumeDouble()",
        "consumeChar()",
        "consumeChar(char min, char max)",
        "consumeShort(short min, short max)",
        "consumeShort()",
        "consumeRemainingAsCharSequence()",
        "consumeBytestring()",
        "consumeBigInteger(int minNumBits)",
        "consumeEnum(Class<E> enumType)",
        "consumeProbabilityDouble()",
        "consumeFraction()",
        "pickValue(T... values)",
        "pickValue(List<T> values)",
        "consumeByte()",
        "consumeIntList(int length)",
        "consumeLongList(int length)",
        "consumeFloatList(int length)",
        "consumeDoubleList(int length)",
        "consumeCharList(int length)"
      ]
    }
  }
}
