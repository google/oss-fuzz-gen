{
  "task": "Your goal is to write a fuzzing harness for the provided method signature to fuzz the method with random data. It is important that the provided solution compiles and actually calls the function specified by the method signature:",
  
  "target": {
    "method_signature": "{METHOD_SIGNATURE}",
    "description": "The target method belongs to the Python project {PROJECT_NAME} ({PROJECT_URL}).\nThis method requires {ARG_COUNT} arguments. You must prepare them with random seeded data.\n{CLASS_METHOD_OR_GENERAL_METHOD}"
  },
  
  "requirements": [
    "You MUST import all necessary python packages, including the pakage {PACKAGE} from the project.",
    "Try as many variations of these inputs as possible.",
    "Try creating the harness as complex as possible.",
    "Try adding some nested loop to invoke the target method for multiple times.",
    "The generated fuzzing harness should be wrapped with the code tag.",
    "Never call `with atheris.instrumented_function()`",
    "Never involve calls to functions the Atheris module.",
    "You MUST use `fdp=atheris.FuzzedDataProvider(data)` and `fdp.ConsumeUnicodeNoSurrogates(1024)` to seed the random fuzz data.",
    "You MUST handle all possible exceptions",
    "Please avoid using any multithreading or multi-processing approach.",
    "You MUST include the following Atheris code in the generated harness.\n  atheris.instrument_all()\n  atheris.Setup(sys.argv, TestOneInput)\n  atheris.Fuzz()"
  ]
}
