{
  "steps": [
    {
      "step": 1,
      "description": "Analyse the structure and source code of the target method.",
      "details": {
        "method_or_constructor": "{METHOD_OR_CONSTRUCTOR}",
        "source_code": "{SELF_SOURCE}",
        "considerations": [
          "Purpose and functionality of the method.",
          "Input processing and internal logic."
        ]
      }
    },
    {
      "step": 2,
      "description": "Analyse the signature and other properties of the target methods.",
      "details": {
        "method_signature": "{TARGET}",
        "arguments": "{ARGUMENTS}",
        "explanation": "The <target> tag contains the method signature and basic properties.\nThe <arguments> tag contains the description of all arguments of the target method."
      }
    },
    {
      "step": 3,
      "description": "Understand initialization requirements.",
      "details": {
        "constructors": "{CONSTRUCTORS}",
        "explanation": "Identify what is needed to properly initialize the object for invoking the target method. The <constructors> tag contains the description of constructors that could create the needed objects if the target method is non-static."
      }
    },
    {
      "step": 4,
      "description": "Understand exception handling requirements.",
      "details": {
        "exceptions": "{EXCEPTIONS}",
        "explanation": "Identify what exceptions are thrown from the target method and explicitly handle them if necessary. The <exceptions> tag contains all the exceptions directly thrown from the target methods that must be handled in the fuzzing harness."
      }
    },
    {
      "step": 5,
      "description": "Understand how to correctly invoke the target method.",
      "details": {
        "cross_source": "{CROSS_SOURCE}",
        "explanation": "A list of source codes of methods/constructors that directly invoke the target {METHOD_OR_CONSTRUCTOR} for reference. This section may be empty if no such source codes are found."
      }
    },
    {
      "step": 6,
      "description": "Understand general requirements for Java fuzzing harness writing.",
      "details": {
        "requirements": "{REQUIREMENTS}",
        "explanation": "The <requirements> tag contains a list of additional requirements for the fuzzing harness generation that must be followed."
      }
    },
    {
      "step": 7,
      "description": "Understand Constraints and edge cases.",
      "details": {
        "considerations": [
          "Valid ranges and data types.",
          "Invalid or edge-case values (e.g., zero, NULL, predefined constants, maximum values).",
          "Special values that trigger different code paths."
        ]
      }
    },
    {
      "step": 8,
      "description": "Plan Fuzz Target Implementation.",
      "details": {
        "data_mapping": "{DATA_MAPPING}",
        "explanation": "Decide how to implement the fuzz target by extracting parameters from the `FuzzedDataProvider` class, following the mapping table and additional descriptions in the <data_mapping> tag."
      }
    },
    {
      "step": 9,
      "description": "Write the fuzz target code.",
      "details": {
        "considerations": [
          "Implement the fuzzing harness following all the analysis results from previous steps.",
          "Must follow the Jazzer framework and the given fuzzing harness template.",
          "Create the necessary objects and initialise necessary arguments.",
          "Ensure the code compiles successfully with correctly built and retrieved dependencies.",
          "Handle exceptions generated in addition to those directly thrown from invoking the target methods.",
          "Close resources and add cleanup logic in the fuzzerTearDown."
        ]
      }
    }
  ]
}
