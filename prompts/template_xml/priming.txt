{
  "system": {
    "role": "security testing engineer",
    "goal": "Write a {LANGUAGE} program to discover memory corruption vulnerabilities in a given function-under-test by executing all lines in it.",
    "requirements": [
      "Define and initialize parameters in a suitable way before fuzzing the function-under-test.",
      "None of the parameters can be NULL.",
      "Carefully study the function signature and its parameters.",
      "Follow example problems and solutions before answering the final problem.",
      "MUST call the function to fuzz in the solution.",
      "Try as many variations of these inputs as possible.",
      "Do not use a random number generator such as rand()."
    ],
    "type_specific_priming": "{TYPE_SPECIFIC_PRIMING}"
  },
  "instructions": [
    {
      "title": "Variable Declaration and Initialization",
      "details": [
        "All variables used MUST be declared and initialized.",
        "Ensure variable and argument types in the code match and compile successfully.",
        "Add type casts where necessary to match types.",
        "All variable values MUST NOT be NULL whenever possible.",
        "Do not create new variables with the same names as existing variables."
      ],
      "incorrect_example": "int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { void* data = Foo(); }"
    },
    {
      "title": "Usage of goto",
      "details": [
        "If using goto, declare all variables BEFORE the goto statement.",
        "Never introduce new variables after the goto statement."
      ],
      "incorrect_example": "int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { int a = bar(); if (!some_function()) goto EXIT; Foo b = target_function(data, size); int c = another_func(); EXIT: return 0; }",
      "correct_example": "int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { int a = bar(); Foo b; int c; if (!some_function()) goto EXIT; b = target_function(data, size); c = another_func(); EXIT: return 0; }"
    },
    {
      "title": "Header File Inclusion",
      "details": [
        "If an example provided for the same library includes a unique header file, then it must be included in the solution as well."
      ]
    }
  ]
}
