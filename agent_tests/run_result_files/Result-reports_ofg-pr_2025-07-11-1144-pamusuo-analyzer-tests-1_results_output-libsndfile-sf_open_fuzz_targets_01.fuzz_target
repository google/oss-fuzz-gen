#include <fuzzer/FuzzedDataProvider.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include "/src/libsndfile/include/sndfile.h"
}

extern "C" SNDFILE * sf_open(const char *, int, SF_INFO *);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);

  SF_INFO sfinfo;
  memset(&sfinfo, 0, sizeof(sfinfo));

  // When writing, sf_open needs a valid format, channels, and samplerate.
  // When reading, these are ignored and populated from the file.
  sfinfo.format = provider.ConsumeIntegral<int>();
  sfinfo.channels = provider.ConsumeIntegralInRange<int>(1, 4);
  sfinfo.samplerate = provider.ConsumeIntegralInRange<int>(8000, 48000);

  const int mode = provider.PickValueInArray({SFM_READ, SFM_WRITE, SFM_RDWR});

  const char *filename = "/tmp/fuzz.wav";

  // Create a file with the fuzzed data.
  std::vector<uint8_t> file_data = provider.ConsumeRemainingBytes<uint8_t>();
  FILE *f = fopen(filename, "wb");
  if (!f) {
    return 0;
  }
  fwrite(file_data.data(), 1, file_data.size(), f);
  fclose(f);

  SNDFILE *sndfile = sf_open(filename, mode, &sfinfo);

  if (sndfile) {
    sf_close(sndfile);
  }

  remove(filename);

  return 0;
}