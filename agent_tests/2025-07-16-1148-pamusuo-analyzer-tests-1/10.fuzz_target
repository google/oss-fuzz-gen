#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>

// Per instruction, include this specific header.
#include "/usr/include/c++/9/bits/basic_string.h"

// Headers for the classes under test.
#include "src/terminal/terminal.h"
#include "src/terminal/parseraction.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);

  // Use reasonable limits to avoid excessive memory allocation which would cause timeouts.
  const size_t init_width = provider.ConsumeIntegralInRange<size_t>(1, 1024);
  const size_t init_height = provider.ConsumeIntegralInRange<size_t>(1, 1024);

  Terminal::Emulator emulator(init_width, init_height);

  const size_t resize_width = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  const size_t resize_height = provider.ConsumeIntegralInRange<size_t>(0, 1024);

  // Create a Resize action object, which is a friend of Emulator.
  const Parser::Resize resize_action(resize_width, resize_height);

  // Call the public method that will, in turn, call the private resize method.
  resize_action.act_on_terminal(&emulator);

  return 0;
}