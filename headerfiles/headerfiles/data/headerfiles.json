{
    "avahi": {
        "headers": [
            "assert.h",
            "sys/socket.h",
            "avahi-common/address.h",
            "avahi-common/error.h",
            "avahi-common/simple-watch.h",
            "avahi-core/core.h",
            "avahi-core/publish.h",
            "avahi-common/alternative.h",
            "avahi-common/gccmacro.h",
            "avahi-common/strlst.h",
            "avahi-core/dns.h",
            "avahi-core/rr.h",
            "avahi-common/cdecl.h",
            "avahi-common/llist.h",
            "avahi-common/thread-watch.h",
            "avahi-core/hashmap.h",
            "avahi-common/defs.h",
            "avahi-common/malloc.h",
            "avahi-common/timeval.h",
            "avahi-core/log.h",
            "avahi-common/domain.h",
            "avahi-common/rlist.h",
            "avahi-common/watch.h",
            "avahi-core/lookup.h"
        ],
        "build": [
            "#!/bin/bash",
            "",
            "set -eux",
            "",
            "# Default flags for compilation",
            "flags=\"-O1 -fno-omit-frame-pointer -g -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address,undefined\"",
            "",
            "export CC=${CC:-clang}",
            "export CFLAGS=${CFLAGS:-$flags}",
            "",
            "export CXX=${CXX:-clang++}",
            "export CXXFLAGS=${CXXFLAGS:-$flags}",
            "",
            "# Navigate to the Avahi project root directory",
            "cd $SRC/avahi",
            "",
            "# Update package lists and install dependencies",
            "apt-get update",
            "apt-get install -y autoconf gettext libtool m4 automake pkg-config libexpat-dev",
            "",
            "# Additional dependencies for i386 architecture",
            "if [[ \"$ARCHITECTURE\" == i386 ]]; then",
            "    apt-get install -y libexpat-dev:i386",
            "fi",
            "",
            "# Additional undefined behavior sanitizer checks",
            "if [[ \"$SANITIZER\" == undefined ]]; then",
            "    additional_ubsan_checks=pointer-overflow,alignment",
            "    UBSAN_FLAGS=\"-fsanitize=$additional_ubsan_checks -fno-sanitize-recover=$additional_ubsan_checks\"",
            "    CFLAGS=\"$CFLAGS $UBSAN_FLAGS\"",
            "    CXXFLAGS=\"$CXXFLAGS $UBSAN_FLAGS\"",
            "fi",
            "",
            "# Disable consistency checks in pthread configuration",
            "sed -i 's/check_inconsistencies=yes/check_inconsistencies=no/' common/acx_pthread.m4",
            "",
            "# Generate configuration scripts and configure the project",
            "if ! ./autogen.sh \\",
            "    --disable-stack-protector --disable-qt3 --disable-qt4 --disable-qt5 --disable-gtk \\",
            "    --disable-gtk3 --disable-dbus --disable-gdbm --disable-libdaemon --disable-python \\",
            "    --disable-manpages --disable-mono --disable-monodoc --disable-glib --disable-gobject \\",
            "    --disable-libevent --disable-libsystemd \\",
            "    --prefix=\"$HEADERFILES_CUSTOM_INSTALL_DIR\"; then",
            "    cat config.log",
            "    exit 1",
            "fi",
            "",
            "# Compile the project using all available processors",
            "make V=1",
            "",
            "# Install the compiled project to the custom install directory",
            "make install",
            "",
            "make clean",
            "cd -",
            "# The header files and libraries should now be installed in ${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "echo \"Avahi has been installed to ${HEADERFILES_CUSTOM_INSTALL_DIR}\""
        ]
    },
    "bind9": {
        "headers": [
            "dns/acl.h",
            "dns/adb.h",
            "dns/badcache.h",
            "dns/bit.h",
            "dns/byaddr.h",
            "dns/cache.h",
            "dns/callbacks.h",
            "dns/catz.h",
            "dns/cert.h",
            "dns/client.h",
            "dns/clientinfo.h",
            "dns/compress.h",
            "dns/db.h",
            "dns/dbiterator.h",
            "dns/diff.h",
            "dns/dispatch.h",
            "dns/dlz.h",
            "dns/dlz_dlopen.h",
            "dns/dns64.h",
            "dns/dnssec.h",
            "dns/dnstap.h",
            "dns/ds.h",
            "dns/dsdigest.h",
            "dns/dyndb.h",
            "dns/ecs.h",
            "dns/edns.h",
            "dns/fixedname.h",
            "dns/forward.h",
            "dns/geoip.h",
            "dns/ipkeylist.h",
            "dns/iptable.h",
            "dns/journal.h",
            "dns/kasp.h",
            "dns/keydata.h",
            "dns/keyflags.h",
            "dns/keymgr.h",
            "dns/keystore.h",
            "dns/keytable.h",
            "dns/keyvalues.h",
            "dns/master.h",
            "dns/masterdump.h",
            "dns/message.h",
            "dns/name.h",
            "dns/nametree.h",
            "dns/ncache.h",
            "dns/nsec.h",
            "dns/nsec3.h",
            "dns/nta.h",
            "dns/opcode.h",
            "dns/order.h",
            "dns/peer.h",
            "dns/private.h",
            "dns/qp.h",
            "dns/rbt.h",
            "dns/rcode.h",
            "dns/rdata.h",
            "dns/rdataclass.h",
            "dns/rdatalist.h",
            "dns/rdataset.h",
            "dns/rdatasetiter.h",
            "dns/rdataslab.h",
            "dns/rdatatype.h",
            "dns/remote.h",
            "dns/request.h",
            "dns/resolver.h",
            "dns/result.h",
            "dns/rootns.h",
            "dns/rpz.h",
            "dns/rriterator.h",
            "dns/rrl.h",
            "dns/sdlz.h",
            "dns/secalg.h",
            "dns/secproto.h",
	        "dns/skr.h",
            "dns/soa.h",
            "dns/ssu.h",
            "dns/stats.h",
            "dns/time.h",
            "dns/tkey.h",
            "dns/trace.h",
            "dns/transport.h",
            "dns/tsig.h",
            "dns/ttl.h",
            "dns/types.h",
            "dns/update.h",
            "dns/validator.h",
            "dns/view.h",
            "dns/xfrin.h",
            "dns/zone.h",
            "dns/zonekey.h",
            "dns/zoneverify.h",
            "dns/zt.h",
            "dst/dst.h",
            "dst/gssapi.h",
            "irs/resconf.h",
            "isc/ascii.h",
            "isc/assertions.h",
            "isc/async.h",
            "isc/atomic.h",
            "isc/attributes.h",
            "isc/backtrace.h",
            "isc/barrier.h",
            "isc/base32.h",
            "isc/base64.h",
            "isc/buffer.h",
            "isc/commandline.h",
            "isc/condition.h",
            "isc/counter.h",
            "isc/dir.h",
            "isc/dnsstream.h",
            "isc/endian.h",
            "isc/entropy.h",
            "isc/errno.h",
            "isc/error.h",
            "isc/file.h",
            "isc/fips.h",
            "isc/formatcheck.h",
            "isc/fuzz.h",
            "isc/getaddresses.h",
            "isc/hash.h",
            "isc/hashmap.h",
            "isc/heap.h",
	        "isc/helper.h",
            "isc/hex.h",
            "isc/histo.h",
            "isc/hmac.h",
            "isc/ht.h",
            "isc/httpd.h",
            "isc/interfaceiter.h",
            "isc/iterated_hash.h",
            "isc/job.h",
            "isc/lang.h",
            "isc/lex.h",
            "isc/list.h",
            "isc/log.h",
            "isc/loop.h",
            "isc/magic.h",
            "isc/managers.h",
            "isc/md.h",
            "isc/mem.h",
            "isc/meminfo.h",
            "isc/mutex.h",
            "isc/mutexblock.h",
            "isc/net.h",
            "isc/netaddr.h",
            "isc/netmgr.h",
            "isc/netscope.h",
            "isc/nonce.h",
            "isc/once.h",
            "isc/os.h",
            "isc/overflow.h",
            "isc/parseint.h",
            "isc/pause.h",
            "isc/portset.h",
            "isc/proxy2.h",
            "isc/queue.h",
            "isc/quota.h",
            "isc/radix.h",
            "isc/random.h",
            "isc/ratelimiter.h",
            "isc/refcount.h",
            "isc/regex.h",
            "isc/region.h",
            "isc/result.h",
            "isc/rwlock.h",
            "isc/safe.h",
            "isc/serial.h",
            "isc/signal.h",
            "isc/siphash.h",
            "isc/sockaddr.h",
            "isc/spinlock.h",
            "isc/stats.h",
            "isc/stdio.h",
            "isc/stdtime.h",
            "isc/strerr.h",
            "isc/string.h",
            "isc/symtab.h",
            "isc/syslog.h",
            "isc/thread.h",
            "isc/tid.h",
            "isc/time.h",
            "isc/timer.h",
            "isc/tls.h",
            "isc/tm.h",
            "isc/types.h",
            "isc/urcu.h",
            "isc/url.h",
            "isc/utf8.h",
            "isc/util.h",
            "isc/uv.h",
            "isc/work.h",
            "isc/xml.h"
        ],
        "build": [
            "cd /src/bind9",
	        "autoreconf -fi",
	        "./configure --disable-shared --enable-static --enable-developer --without-cmocka --without-zlib --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} --enable-fuzzing=ossfuzz",
	        "make -C lib/isc",
            "make -C lib/dns",
            "make -C tests/libtest",
            "make -C lib/isc install",
            "make -C lib/dns install",
            "make -C tests/libtest install",
            "make -C lib/dns clean",
            "make -C lib/isc clean",
            "make -C tests/libtest clean",
            "cd -"
        ]
    },
    "bluez": {
        "headers": [
	    "glib.h",
            "bluetooth/bluetooth.h",
            "bluetooth/bnep.h",
            "bluetooth/cmtp.h",
            "bluetooth/hci.h",
            "bluetooth/hci_lib.h",
            "bluetooth/hidp.h",
            "bluetooth/l2cap.h",
            "bluetooth/rfcomm.h",
            "bluetooth/sco.h",
            "bluetooth/sdp.h",
            "bluetooth/sdp_lib.h",
	        "bluetooth/uuid.h",
	        "gobex/gobex-apparam.h",
            "gobex/gobex-debug.h",
            "gobex/gobex-defs.h",
            "gobex/gobex-header.h",
            "gobex/gobex-packet.h",
            "gobex/gobex.h",
            "src/adapter.h",
            "src/adv_monitor.h",
            "src/advertising.h",
            "src/agent.h",
            "src/backtrace.h",
            "src/battery.h",
            "src/btd.h",
            "src/dbus-common.h",
            "src/device.h",
            "src/eir.h",
            "src/error.h",
            "src/gatt-client.h",
            "src/gatt-database.h",
            "src/log.h",
            "src/oui.h",
            "src/plugin.h",
            "src/profile.h",
            "src/sdp-client.h",
            "src/sdp-xml.h",
            "src/sdpd.h",
            "src/service.h",
            "src/set.h",
            "src/settings.h",
            "src/storage.h",
            "src/textfile.h",
            "src/uuid-helper.h" 
        ],
        "build": [
            "cd /src/bluez",
            "autoreconf -fi",
            "./configure --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} --enable-library",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "brotli": {
        "headers": [
            "brotli/decode.h",
            "brotli/encode.h",
            "brotli/port.h",
            "brotli/shared_dictionary.h",
            "brotli/types.h"
        ],
        "build": [
            "cd /src/brotli",
            "cmake . -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=OFF --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make -j$(nproc) brotlidec",
            "make -j$(nproc) install",
            "make clean",
            "cd -"
        ]
    },
    "capstone": {
        "headers": [
            "capstone/capstone.h"
        ],
        "build": [
            "cd /src/capstonenext",
            "mkdir build1",
            "cd build1",
            "cmake -DCAPSTONE_BUILD_SHARED=0 --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}  ..",
            "make -j$(nproc) install",
            "make clean"
        ]
    },
    "coturn": {
        "headers": [
            "stdio.h",
            "string.h",
            "stdlib.h",
            "fcntl.h",
            "apputils.h",
            "ns_turn_utils.h",
            "stun_buffer.h",
            "ns_turn_server.h",
            "ns_turn_msg_addr.h"
        ],
        "build": [
            "mkdir -p /src/coturn/my_build",
            "cd /src/coturn/my_build",
            "cmake -DFUZZER=ON -DLIB_FUZZING_ENGINE=\"$LIB_FUZZING_ENGINE\" -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,-rpath,'\\$ORIGIN/lib'\" -DWITH_MYSQL=OFF -Wno-dev --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}  ../.",
            "make install",
            "make clean",
            "cd -",
            "rm -rf /src/coturn/my_build",
            "export CFLAGS=\"${CFLAGS} -I${HEADERFILES_CUSTOM_INSTALL_DIR}/include/turn -I${HEADERFILES_CUSTOM_INSTALL_DIR}/include/turn/client -I${HEADERFILES_CUSTOM_INSTALL_DIR}/include/turn/server \""
        ]
    },
    "croaring": {
        "headers": [
            "stdarg.h",
            "stddef.h",
            "setjmp.h",
            "assert.h"
        ],
        "build": [
	    "mkdir build-dir && cd build-dir",
            "cmake -DENABLE_ROARING_TESTS=OFF --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
	    "make -j$(nproc)",
            "make install",
            "make clean",
	    "cd ..",
	    "rm -rf build-dir"
        ]
    },
    "dovecot": {
        "headers": [
            "stdbool.h"
        ],
        "build": [
            "./autogen.sh",
            "./configure PANDOC=false --with-fuzzer=clang --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean"
        ]
    },
    "igraph": {
        "headers": [
            "igraph/igraph.h"
        ],
        "build": [
            "mkdir -p /src/igraph/build",
            "cd /src/igraph/build",
            "cmake .. -DIGRAPH_WARNINGS_AS_ERRORS=OFF -DCMAKE_BUILD_TYPE=None -DCMAKE_PREFIX_PATH=$DEPS_PATH -DFLEX_KEEP_LINE_NUMBERS=ON --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "inchi": {
        "headers": [
            "ichi.h",
            "inchi_api.h",
            "inchi_gui.h",
            "inchicmp.h",
            "ichi_bns.h",
            "ichi_io.h",
            "ichicano.h",
            "ichicant.h",
            "ichicomn.h",
            "ichicomp.h",
            "ichidrp.h",
            "ichierr.h",
            "ichimain.h",
            "ichimake.h",
            "ichinorm.h",
            "ichiring.h",
            "ichirvrs.h",
            "ichisize.h",
            "ichister.h",
            "ichitaut.h",
            "ichitime.h",
            "ikey_base26.h",
            "extr_ct.h",
            "incomdef.h",
            "inpdef.h",
            "ixa.h",
            "mode.h",
            "mol_fmt.h",
            "readinch.h",
            "sha2.h",
            "strutil.h",
            "util.h",
            "ixa_mol.h",
            "ixa_status.h",
            "inchi_dll.h",
            "inchi_dll_a.h",
            "inchi_dll_b.h",
            "inchi_dll_main.h"
        ],
        "build": []
    },
    "kamailio": {
        "headers": [
            "hf.h",
            "keys.h",
            "msg_parser.h",
            "parse_addr_spec.h",
            "parse_allow.h",
            "parse_body.h",
            "parse_content.h",
            "parse_cseq.h",
            "parse_date.h",
            "parse_def.h",
            "parse_disposition.h",
            "parse_diversion.h",
            "parse_event.h",
            "parse_expires.h",
            "parse_fline.h",
            "parse_from.h",
            "parse_hname2.h",
            "parse_identity.h",
            "parse_identityinfo.h",
            "parse_methods.h",
            "parse_nameaddr.h",
            "parse_option_tags.h",
            "parse_param.h",
            "parse_ppi_pai.h",
            "parse_privacy.h",
            "parse_refer_to.h",
            "parse_require.h",
            "parse_retry_after.h",
            "parse_rpid.h",
            "parse_rr.h",
            "parse_sipifmatch.h",
            "parse_subscription_state.h",
            "parse_supported.h",
            "parse_to.h",
            "parse_uri.h",
            "parse_via.h",
            "parser_f.h"
        ],
        "build": []
    },
    "krb5": {
        "headers": [
            "com_err.h",
            "kdb.h",
            "krad.h",
            "krb5.h",
            "profile.h",
            "verto-module.h",
            "verto.h",
            "gssapi.h",
            "gssapi/gssapi.h",
            "gssapi/gssapi_alloc.h",
            "gssapi/gssapi_ext.h",
            "gssapi/gssapi_generic.h",
            "gssapi/gssapi_krb5.h",
            "gssapi/mechglue.h",
            "gssrpc/types.h",
            "gssrpc/auth.h",
            "gssrpc/auth_gss.h",
            "gssrpc/auth_gssapi.h",
            "gssrpc/auth_unix.h",
            "gssrpc/clnt.h",
            "gssrpc/netdb.h",
            "gssrpc/pmap_clnt.h",
            "gssrpc/pmap_prot.h",
            "gssrpc/pmap_rmt.h",
            "gssrpc/rename.h",
            "gssrpc/rpc.h",
            "gssrpc/rpc_msg.h",
            "gssrpc/svc.h",
            "gssrpc/svc_auth.h",
            "gssrpc/xdr.h",
            "kadm5/admin.h",
            "kadm5/chpass_util_strings.h",
            "kadm5/kadm_err.h",
            "krb5/krb5.h",
            "krb5/ccselect_plugin.h",
            "krb5/certauth_plugin.h",
            "krb5/clpreauth_plugin.h",
            "krb5/hostrealm_plugin.h",
            "krb5/kadm5_auth_plugin.h",
            "krb5/kadm5_hook_plugin.h",
            "krb5/kdcpolicy_plugin.h",
            "krb5/kdcpreauth_plugin.h",
            "krb5/localauth_plugin.h",
            "krb5/locate_plugin.h",
            "krb5/plugin.h",
            "krb5/preauth_plugin.h",
            "krb5/pwqual_plugin.h"
        ],
        "build": [
            "pushd src/",
            "autoreconf",
            "./configure CFLAGS=\"-fcommon $CFLAGS\" CXXFLAGS=\"-fcommon $CXXFLAGS\" --enable-static --disable-shared --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make",
            "make install",
            "make clean",
            "popd"
        ]
    },
    "lcms": {
        "headers": [
            "lcms2.h"
        ],
        "build": [
            "cd /src/lcms",
            "./configure --enable-shared=no --enable-static --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libarchive": {
        "headers": [
            "assert.h",
            "archive.h",
            "archive_entry.h"
        ],
        "build": [
            "cd $SRC/libarchive",
            "mkdir build3",
            "cd build3",
            "cmake -DCHECK_CRC_ON_SOLID_SKIP=1 -DDONT_FAIL_ON_CRC_ERROR=1 --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ../",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libbpf": {
        "headers": [
            "errno.h",
            "linux/types.h",
            "stdbool.h",
            "bpf/bpf.h",
            "bpf/btf.h",
            "bpf/libbpf.h",
            "bpf/bpf_endian.h",
            "bpf/libbpf_common.h",
            "bpf/libbpf_legacy.h",
            "bpf/libbpf_version.h",
            "bpf/skel_internal.h"
        ],
        "build": [
            "set -eux",
            "export CFLAGS=\"${CFLAGS} -I${HEADERFILES_CUSTOM_INSTALL_DIR}/usr/include \"",
            "export CXXFLAGS=\"${CXXFLAGS} -I${HEADERFILES_CUSTOM_INSTALL_DIR}/usr/include \"",
            "export LDFLAGS=\"${LDFLAGS} -L${HEADERFILES_CUSTOM_INSTALL_DIR}/usr/lib64 -lbpf \"",
            "SANITIZER=${SANITIZER:-address}",
            "flags=\"-O1 -fno-omit-frame-pointer -g -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=$SANITIZER -fsanitize=fuzzer-no-link\"",
            "export CC=${CC:-clang}",
            "export CFLAGS=${CFLAGS:-$flags}",
            "export CXX=${CXX:-clang++}",
            "export CXXFLAGS=${CXXFLAGS:-$flags}",
            "pushd $SRC/libbpf",
            "export OUT=${OUT:-\"$(pwd)/out\"}",
            "mkdir -p \"$OUT\"",
            "export LIB_FUZZING_ENGINE=${LIB_FUZZING_ENGINE:--fsanitize=fuzzer}",
            "# libelf is compiled with _FORTIFY_SOURCE by default and it",
            "# isn't compatible with MSan. It was borrowed",
            "# from https://github.com/google/oss-fuzz/pull/7422",
            "if [[ \"$SANITIZER\" == memory ]]; then",
            "    CFLAGS+=\" -U_FORTIFY_SOURCE\"",
            "    CXXFLAGS+=\" -U_FORTIFY_SOURCE\"",
            "fi",
            "# The alignment check is turned off by default on OSS-Fuzz/CFLite so it should be",
            "# turned on explicitly there. It was borrowed from",
            "# https://github.com/google/oss-fuzz/pull/7092",
            "if [[ \"$SANITIZER\" == undefined ]]; then",
            "    additional_ubsan_checks=alignment",
            "    UBSAN_FLAGS=\"-fsanitize=$additional_ubsan_checks -fno-sanitize-recover=$additional_ubsan_checks\"",
            "    CFLAGS+=\" $UBSAN_FLAGS\"",
            "    CXXFLAGS+=\" $UBSAN_FLAGS\"",
            "fi",
            "# Ideally libbelf should be built using release tarballs available",
            "# at https://sourceware.org/elfutils/ftp/. Unfortunately sometimes they",
            "# fail to compile (for example, elfutils-0.185 fails to compile with LDFLAGS enabled",
            "# due to https://bugs.gentoo.org/794601) so let's just point the script to",
            "# commits referring to versions of libelf that actually can be built",
            "rm -rf elfutils",
            "git clone https://sourceware.org/git/elfutils.git",
            "(",
            "cd elfutils",
            "git checkout 67a187d4c1790058fc7fd218317851cb68bb087c",
            "git log --oneline -1",
            "# ASan isn't compatible with -Wl,--no-undefined: https://github.com/google/sanitizers/issues/380",
            "sed -i 's/^\\(NO_UNDEFINED=\\).*/\\1/' configure.ac",
            "# ASan isn't compatible with -Wl,-z,defs either:",
            "# https://clang.llvm.org/docs/AddressSanitizer.html#usage",
            "sed -i 's/^\\(ZDEFS_LDFLAGS=\\).*/\\1/' configure.ac",
            "if [[ \"$SANITIZER\" == undefined ]]; then",
            "    # That's basicaly what --enable-sanitize-undefined does to turn off unaligned access",
            "    # elfutils heavily relies on on i386/x86_64 but without changing compiler flags along the way",
            "    sed -i 's/\\(check_undefined_val\\)=[0-9]/\\1=1/' configure.ac",
            "fi",
            "autoreconf -i -f",
            "if ! ./configure --enable-maintainer-mode --disable-debuginfod --disable-libdebuginfod \\",
            "            --disable-demangler --without-bzlib --without-lzma --without-zstd \\",
            "        CC=\"$CC\" CFLAGS=\"-Wno-error $CFLAGS\" CXX=\"$CXX\" CXXFLAGS=\"-Wno-error $CXXFLAGS\" LDFLAGS=\"$CFLAGS\"; then",
            "    cat config.log",
            "    exit 1",
            "fi",
            "make -C config -j$(nproc) V=1",
            "make -C lib -j$(nproc) V=1",
            "make -C libelf -j$(nproc) V=1",
            "make -C config -j$(nproc) V=1 install",
            "make -C lib -j$(nproc) V=1 install",
            "make -C libelf -j$(nproc) V=1 install",
            ")",
            "make -C src BUILD_STATIC_ONLY=y V=1 clean",
            "make -C src -j$(nproc) CFLAGS=\"-I$(pwd)/elfutils/libelf $CFLAGS\" BUILD_STATIC_ONLY=y V=1 OBJDIR=/src/libbpf/jarvis-build DESTDIR=${HEADERFILES_CUSTOM_INSTALL_DIR} install",
            "make -C src clean",
            "(",
            "cd elfutils",
            "make -C config -j$(nproc) V=1 clean",
            "make -C lib -j$(nproc) V=1 clean",
            "make -C libelf -j$(nproc) V=1 clean",
            ")",
            "popd"
        ]
    },
    "libcbor": {
        "headers": [
            "cbor.h"
        ],
        "build": [
            "mkdir -p /src/libcbor/nbuild",
            "cd /src/libcbor/nbuild",
            "cmake -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=${HEADERFILES_CUSTOM_INSTALL_DIR} -D SANITIZE=OFF ..",
            "make ",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libcoap": {
        "headers": [
            "coap3/coap.h"
        ],
        "build": [
            "export LDFLAGS=\"${LDFLAGS} -lpthread \"",
            "pushd /src/libcoap",
            "./autogen.sh",
            "./configure --disable-doxygen --disable-manpages  --disable-dtls --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "popd"
        ]
    },
    "libdwarf": {
        "headers": [
            "fcntl.h"
        ],
        "build": [
            "mkdir -p /src/libdwarf/build",
            "cd /src/libdwarf/build",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
            "make install",
            "make clean",
            "cd -",
            "rm -rf /src/libdwarf/build"
        ]
    },
    "libevent": {
        "headers": [
            "event.h",
            "evdns.h",
            "event2/dns.h",
            "evhttp.h",
            "evrpc.h",
            "evutil.h",
            "event2/buffer.h",
            "event2/dns_compat.h",
            "event2/http.h",
            "event2/rpc_compat.h",
            "event2/visibility.h",
            "event2/buffer_compat.h",
            "event2/dns_struct.h",
            "event2/http_compat.h",
            "event2/rpc_struct.h",
            "event2/watch.h",
            "event2/bufferevent.h",
            "event2/event-config.h",
            "event2/http_struct.h",
            "event2/tag.h",
            "event2/ws.h",
            "event2/bufferevent_compat.h",
            "event2/event.h",
            "event2/keyvalq_struct.h",
            "event2/tag_compat.h",
            "event2/bufferevent_struct.h",
            "event2/event_compat.h",
            "event2/listener.h",
            "event2/thread.h",
            "event2/event_struct.h",
            "event2/rpc.h",
            "event2/util.h"
        ],
        "build": [
            "mkdir -p /src/libevent/build1",
            "cd /src/libevent/build1",
            "cmake -DEVENT__DISABLE_MBEDTLS=ON \\",
            "      -DEVENT__DISABLE_OPENSSL=ON \\",
            "      -DEVENT__LIBRARY_TYPE=STATIC \\",
            "      -DEVENT__DISABLE_TESTS=ON \\",
            "      -DEVENT__DISABLE_SAMPLES=ON \\",
            "      --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ../",
            "make",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libexif": {
        "headers": [
            "assert.h",
            "libexif/exif-data-type.h",
            "libexif/exif-format.h",
            "libexif/exif-log.h",
            "libexif/exif-tag.h",
            "libexif/exif-byte-order.h",
            "libexif/exif-data.h",
            "libexif/exif-ifd.h",
            "libexif/exif-mem.h",
            "libexif/exif-utils.h",
            "libexif/exif-content.h",
            "libexif/exif-entry.h",
            "libexif/exif-loader.h",
            "libexif/exif-mnote-data.h"
        ],
        "build": []
    },
    "libfido2": {
        "headers": [
            "cbor.h",
            "zconf.h",
            "zlib.h",
            "fido.h"
        ],
        "build": []
    },
    "libfuse": {
        "headers": [
            "fuse.h",
            "fuse_lowlevel.h",
            "fuse_i.h",
            "fuse_misc.h",
            "fuse_kernel.h",
            "mount_util.h",
            "fuse_mount_compat.h",
            "cuse_lowlevel.h"
        ],
        "build": []
    },
    "libgd": {
        "headers": [
            "gd.h",
            "gd_color_map.h",
            "gd_errors.h",
            "gd_io.h",
            "gdcache.h",
            "gdfontg.h",
            "gdfontl.h",
            "gdfontmb.h",
            "gdfonts.h",
            "gdfontt.h",
            "gdfx.h",
            "gdpp.h"
        ],
        "build": []
    },
    "libical": {
        "headers": [
            "libical/ical.h",
            "libical/icalarray.h",
            "libical/icalattach.h",
            "libical/icalcalendar.h",
            "libical/icalclassify.h",
            "libical/icalcluster.h",
            "libical/icalcomponent.h",
            "libical/icalderivedparameter.h",
            "libical/icalderivedproperty.h",
            "libical/icalderivedvalue.h",
            "libical/icaldirset.h",
            "libical/icaldirsetimpl.h",
            "libical/icalduration.h",
            "libical/icalenums.h",
            "libical/icalerror.h",
            "libical/icalfileset.h",
            "libical/icalfilesetimpl.h",
            "libical/icalgauge.h",
            "libical/icalgaugeimpl.h",
            "libical/icallangbind.h",
            "libical/icalmemory.h",
            "libical/icalmessage.h",
            "libical/icalmime.h",
            "libical/icalparameter.h",
            "libical/icalparser.h",
            "libical/icalperiod.h",
            "libical/icalproperty.h",
            "libical/icalrecur.h",
            "libical/icalrestriction.h",
            "libical/icalset.h",
            "libical/icalspanlist.h",
            "libical/icalss.h",
            "libical/icalssyacc.h",
            "libical/icaltime.h",
            "libical/icaltimezone.h",
            "libical/icaltypes.h",
            "libical/icaltz-util.h",
            "libical/icalvcal.h",
            "libical/libical_ical_export.h",
            "libical/libical_icalss_export.h",
            "libical/libical_vcal_export.h",
            "libical/pvl.h",
            "libical/sspm.h",
            "libical/vcaltmp.h",
            "libical/vcc.h",
            "libical/vobject.h"
        ],
        "build": [
            "cmake . -DSTATIC_ONLY=ON -DICAL_GLIB=False --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cmake . -DSTATIC_ONLY=ON -DICAL_GLIB=False --install-prefix=/usr/local",
            "make install",
            "make clean"
        ]
    },
    "libjpeg-turbo": {
        "headers": [
	    
        ],
        "build": [
            "# build.sh have already done `make install`"
        ]
    },
    "libpcap": {
        "headers": [
            "pcap-bpf.h",
            "pcap-namedb.h",
            "pcap.h"
        ],
        "build": [
            "mkdir -p /src/libpcap/build1",
            "cd /src/libpcap/build1",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "librdkafka": {
        "headers": [
            "rdkafka.h",
            "regexp.h"
        ],
        "build": [
            "mkdir -p /src/librdkafka/build1",
            "cd /src/librdkafka/build1",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} -DRDKAFKA_BUILD_STATIC=ON -DRDKAFKA_BUILD_EXAMPLES=OFF -DHAVE_REGEX=OFF ../",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libredwg": {
        "headers": [
            "dwg.h",
            "dwg_api.h"
        ],
        "build": [
            "cd $SRC/libredwg",
            "sh autogen.sh",
            "./configure --disable-shared --disable-bindings --enable-release --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libressl": {
        "headers": [
            "tls.h",
            "openssl/aes.h",
            "openssl/conf.h",
            "openssl/engine.h",
            "openssl/objects.h",
            "openssl/rc4.h",
            "openssl/tls1.h",
            "openssl/asn1.h",
            "openssl/conf_api.h",
            "openssl/err.h",
            "openssl/ocsp.h",
            "openssl/ripemd.h",
            "openssl/ts.h",
            "openssl/asn1t.h",
            "openssl/crypto.h",
            "openssl/evp.h",
            "openssl/opensslconf.h",
            "openssl/rsa.h",
            "openssl/txt_db.h",
            "openssl/bio.h",
            "openssl/ct.h",
            "openssl/gost.h",
            "openssl/opensslfeatures.h",
            "openssl/safestack.h",
            "openssl/ui.h",
            "openssl/blowfish.h",
            "openssl/curve25519.h",
            "openssl/hkdf.h",
            "openssl/opensslv.h",
            "openssl/sha.h",
            "openssl/ui_compat.h",
            "openssl/bn.h",
            "openssl/des.h",
            "openssl/hmac.h",
            "openssl/ossl_typ.h",
            "openssl/sm3.h",
            "openssl/whrlpool.h",
            "openssl/buffer.h",
            "openssl/dh.h",
            "openssl/idea.h",
            "openssl/pem.h",
            "openssl/sm4.h",
            "openssl/x509.h",
            "openssl/camellia.h",
            "openssl/dsa.h",
            "openssl/kdf.h",
            "openssl/pem2.h",
            "openssl/srtp.h",
            "openssl/x509_verify.h",
            "openssl/cast.h",
            "openssl/dso.h",
            "openssl/lhash.h",
            "openssl/pkcs12.h",
            "openssl/ssl.h",
            "openssl/x509_vfy.h",
            "openssl/chacha.h",
            "openssl/dtls1.h",
            "openssl/md4.h",
            "openssl/pkcs7.h",
            "openssl/ssl2.h",
            "openssl/x509v3.h",
            "openssl/cmac.h",
            "openssl/ec.h",
            "openssl/md5.h",
            "openssl/poly1305.h",
            "openssl/ssl23.h",
            "openssl/cms.h",
            "openssl/ecdh.h",
            "openssl/modes.h",
            "openssl/rand.h",
            "openssl/ssl3.h",
            "openssl/comp.h",
            "openssl/ecdsa.h",
            "openssl/obj_mac.h",
            "openssl/rc2.h",
            "openssl/stack.h"
        ],
        "build": [
            "cd /src/libressl",
            "cmake -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX \\",
            "      -DCMAKE_C_FLAGS=\"$CFLAGS\" -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\" \\",
            "      $CMAKE_DEFINES --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} $SRC/libressl/",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libsndfile": {
        "headers": [
            "sndfile.h"
        ],
        "build": [
            "apt-get update",
            "apt-get -y install autoconf autogen automake libtool pkg-config python",
            "cd $SRC/libsndfile",
            "autoreconf -vif",
            "./configure --disable-shared --enable-ossfuzzers --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make V=1 install",
            "make distclean",
            "cd -"
        ]
    },
    "libsodium": {
        "headers": [
            "sodium.h"
        ],
        "build": [
            "cd /src/libsodium",
            "./configure --enable-static LDFLAGS=\"$LDFLAGS $CXXFLAGS\" --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libsrtp": {
        "headers": [
            "srtp2/crypto_types.h",
            "srtp2/auth.h",
            "srtp2/cipher.h",
            "srtp2/srtp.h"
        ],
        "build": [
            "cd /src/libsrtp",
            "autoreconf -ivf",
            "./configure --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libssh": {
        "headers": [
            "libssh/ssh2.h",
            "libssh/libssh.h",
            "libssh/server.h",
            "libssh/sftp.h",
            "libssh/callbacks.h"
        ],
        "build": [
            "export LDFLAGS=\"${LDFLAGS} -lpthread \"", 
            "mkdir -p /tmp/build",
            "cd /tmp/build",
            "cmake -DCMAKE_C_COMPILER=\"$CC\" -DCMAKE_CXX_COMPILER=\"$CXX\" \\",
            "    -DCMAKE_C_FLAGS=\"$CFLAGS\" -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\" \\",
            "    -DBUILD_SHARED_LIBS=OFF -DWITH_INSECURE_NONE=ON\\",
	    "    --install-prefix ${HEADERFILES_CUSTOM_INSTALL_DIR} $SRC/libssh",
	    "make",
	    "make install",
            "make clean",
            "cd -"
        ]
    },
    "libssh2": {
        "headers": [
            "libssh2.h",
            "libssh2_publickey.h",
            "libssh2_sftp.h"
        ],
        "build": [
            "apt-get update",
            "apt-get -y install automake libtool libssl-dev zlib1g-dev",
            "autoreconf -fi",
            "./configure --disable-shared --enable-ossfuzzers --disable-examples-build --enable-debug --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
	    "make",
	    "make install",
            "make clean"
        ]
    },
    "libtasn1": {
        "headers": [
            "libtasn1.h"
        ],
        "build": []
    },
    "libtpms": {
        "headers": [
            "libtpms/tpm_error.h",
            "libtpms/tpm_library.h",
            "libtpms/tpm_memory.h",
            "libtpms/tpm_nvfilename.h",
            "libtpms/tpm_tis.h",
            "libtpms/tpm_types.h"
        ],
        "build": [
            "cd /src/libtpms",
            "autoreconf -vfi",
            "./configure --disable-shared --enable-static --with-openssl --with-tpm2 --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make distclean",
            "cd -"
        ]
    },
    "libusb": {
        "headers": [
            "assert.h",
            "libusb/libusb.h"
        ],
        "build": [
            "cd /src/libusb",
            "./autogen.sh",
            "./configure --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libvips": {
        "headers": [
            "vips/vips.h"
        ],
        "build": []
    },
    "libvnc": {
        "headers": [
	    "rfb/rfb.h",
            "rfb/rfbclient.h",
            "rfb/rfbregion.h",
            "sys/types.h",
            "base64.h",
            "crypto.h",
            "d3des.h",
            "lzoconf.h",
            "lzodefs.h",
            "minilzo.h",
            "sha-private.h",
            "sha.h",
            "sockets.h",
            "turbojpeg.h"
        ],
        "build": []
    },
    "libwebsockets": {
        "headers": [
            "lws_config.h",
            "libwebsockets.h"
        ],
        "build": [
            "mkdir -p /tmp/mybuild",
            "cd /tmp/mybuild",
            "cmake -DCMAKE_C_FLAGS=\"$CFLAGS\" -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\" \\",
            "      -DCMAKE_EXE_LINKER_FLAGS=\"$CFLAGS\" -DCMAKE_SHARED_LINKER_FLAGS=\"$CFLAGS\" --install-prefix ${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "libxls": {
        "headers": [
            "locale.h",
            "xls.h"
        ],
        "build": [
            "if [ -f ./autogen.sh ]; then",
            "./autogen.sh",
            "else",
            "./bootstrap",
            "fi",
            "./configure --enable-static --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean"
        ]
    },
    "libyang": {
        "headers": [
            "libyang/libyang.h",
            "libyang/hash_table.h",
            "libyang/plugins_types.h",
            "libyang/version.h"
        ],
        "build": [
            "pushd libyang",
            "git checkout devel",
            "mkdir -p build1",
            "cd build1",
            "cmake -DENABLE_STATIC=ON --install-prefix ${HEADERFILES_CUSTOM_INSTALL_DIR} ../",
            "make install",
            "make clean",
            "popd"
        ]
    },
    "lua": {
        "headers": [
            "lapi.h",
            "lauxlib.h",
            "lcode.h",
            "lctype.h",
            "ldebug.h",
            "ldo.h",
            "lfunc.h",
            "lgc.h",
            "llex.h",
            "llimits.h",
            "lmem.h",
            "lobject.h",
            "lopcodes.h",
            "lopnames.h",
            "lparser.h",
            "lprefix.h",
            "lstate.h",
            "lstring.h",
            "ltable.h",
            "ltests.h",
            "ltm.h",
            "lua.h",
            "luaconf.h",
            "lualib.h",
            "lundump.h",
            "lvm.h",
            "lzio.h"
        ],
        "build": []
    },
    "lwan": {
        "headers": [
            "lwan/lwan.h",
            "lwan/lwan-build-config.h",
            "lwan/lwan-mod-lua.h",
            "lwan/lwan-mod-redirect.h",
            "lwan/lwan-mod-response.h",
            "lwan/lwan-mod-rewrite.h",
            "lwan/lwan-mod-serve-files.h",
            "lwan/lwan-template.h"
        ],
        "build": [
            "mkdir -p /tmp/build",
            "cd /tmp/build",
            "cmake -GNinja --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} $SRC/lwan",
            "ninja -v liblwan.a",
            "ninja -v install",
            "cd -"
        ]
    },
    "mbedtls": {
        "headers": [
            "mbedtls/aes.h",
            "mbedtls/aria.h",
            "mbedtls/asn1.h",
            "mbedtls/asn1write.h",
            "mbedtls/base64.h",
            "mbedtls/block_cipher.h",
            "mbedtls/camellia.h",
            "mbedtls/ccm.h",
            "mbedtls/chacha20.h",
            "mbedtls/chachapoly.h",
            "mbedtls/check_config.h",
            "mbedtls/cipher.h",
            "mbedtls/cmac.h",
            "mbedtls/compat-2.x.h",
            "mbedtls/config_adjust_legacy_crypto.h",
            "mbedtls/config_adjust_legacy_from_psa.h",
            "mbedtls/config_adjust_psa_from_legacy.h",
            "mbedtls/config_adjust_psa_superset_legacy.h",
            "mbedtls/config_adjust_ssl.h",
            "mbedtls/config_adjust_x509.h",
            "mbedtls/config_psa.h",
            "mbedtls/constant_time.h",
            "mbedtls/ctr_drbg.h",
            "mbedtls/debug.h",
            "mbedtls/des.h",
            "mbedtls/dhm.h",
            "mbedtls/ecdh.h",
            "mbedtls/ecdsa.h",
            "mbedtls/ecjpake.h",
            "mbedtls/ecp.h",
            "mbedtls/entropy.h",
            "mbedtls/error.h",
            "mbedtls/gcm.h",
            "mbedtls/hkdf.h",
            "mbedtls/hmac_drbg.h",
            "mbedtls/lms.h",
            "mbedtls/mbedtls_config.h",
            "mbedtls/md.h",
            "mbedtls/md5.h",
            "mbedtls/memory_buffer_alloc.h",
            "mbedtls/net_sockets.h",
            "mbedtls/nist_kw.h",
            "mbedtls/oid.h",
            "mbedtls/pem.h",
            "mbedtls/pk.h",
            "mbedtls/pkcs12.h",
            "mbedtls/pkcs5.h",
            "mbedtls/pkcs7.h",
            "mbedtls/platform.h",
            "mbedtls/platform_time.h",
            "mbedtls/poly1305.h",
            "mbedtls/psa_util.h",
            "mbedtls/ripemd160.h",
            "mbedtls/rsa.h",
            "mbedtls/sha1.h",
            "mbedtls/sha256.h",
            "mbedtls/sha3.h",
            "mbedtls/sha512.h",
            "mbedtls/ssl.h",
            "mbedtls/ssl_cache.h",
            "mbedtls/ssl_ciphersuites.h",
            "mbedtls/ssl_cookie.h",
            "mbedtls/ssl_ticket.h",
            "mbedtls/threading.h",
            "mbedtls/timing.h",
            "mbedtls/version.h",
            "mbedtls/x509.h",
            "mbedtls/x509_crl.h",
            "mbedtls/x509_crt.h",
            "mbedtls/x509_csr.h",
            "psa/build_info.h",
            "psa/crypto.h",
            "psa/crypto_adjust_auto_enabled.h",
            "psa/crypto_adjust_config_dependencies.h",
            "psa/crypto_adjust_config_key_pair_types.h",
            "psa/crypto_adjust_config_synonyms.h",
            "psa/crypto_builtin_composites.h",
            "psa/crypto_builtin_key_derivation.h",
            "psa/crypto_builtin_primitives.h",
            "psa/crypto_compat.h",
            "psa/crypto_config.h",
            "psa/crypto_driver_common.h",
            "psa/crypto_driver_contexts_composites.h",
            "psa/crypto_driver_contexts_key_derivation.h",
            "psa/crypto_driver_contexts_primitives.h",
            "psa/crypto_extra.h",
            "psa/crypto_legacy.h",
            "psa/crypto_platform.h",
            "psa/crypto_se_driver.h",
            "psa/crypto_sizes.h",
            "psa/crypto_struct.h",
            "psa/crypto_types.h",
            "psa/crypto_values.h"
        ],
        "build": [
            "mkdir -p /src/mbedtls/build1",
            "cd /src/mbedtls/build1",
            "cmake -DENABLE_TESTING=OFF --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "mdbtools": {
        "headers": [
            "mdbfakeglib.h",
            "mdbtools.h"
        ],
        "build": [
            "cd /src/mdbtools",
            "autoreconf -f -i",
            "./configure --enable-static --disable-man --disable-glib --disable-silent-rules --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "minizip": {
        "headers": [
            "mz.h",
            "mz_crypt.h",
            "mz_strm.h",
            "mz_strm_mem.h",
            "mz_strm_pkcrypt.h",
            "mz_strm_wzaes.h",
            "mz_zip.h",
            "mz_zip_rw.h",
            "zip.h",
            "mz_compat.h",
            "mz_os.h",
            "mz_strm_buf.h",
            "mz_strm_os.h",
            "mz_strm_split.h",
            "unzip.h"
        ],
        "build": [
            "cd /src/minizip-ng",
            "cmake . -DCMAKE_C_FLAGS=\"$CFLAGS\" -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\" -DMZ_BUILD_FUZZ_TESTS=ON --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} -DCMAKE_VERBOSE_MAKEFILE=ON",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "ndpi": {
        "headers": [
            "ndpi_api.h",
            "ndpi_classify.h",
            "ndpi_encryption.h",
            "ndpi_patricia_typedefs.h",
            "ndpi_replace_printf.h",
            "ndpi_unix.h"
        ],
        "build": [
            "# build libpcap",
            "tar -xvzf libpcap-1.9.1.tar.gz",
            "cd libpcap-1.9.1",
            "./configure --disable-shared",
            "make -j$(nproc)",
            "make install",
            "make clean",
            "cd ..",
            "# build project",
            "cd ndpi",
            "RANLIB=llvm-ranlib LDFLAGS=\"-L/usr/local/lib -lpcap\" ./autogen.sh --enable-fuzztargets --with-only-libndpi --enable-tls-sigs --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make -j$(nproc)",
            "make install",
            "make clean",
            "cd .."
        ]
    },
    "netcdf": {
        "headers": [
            "netcdf.h",
            "netcdf_aux.h",
            "netcdf_dispatch.h",
            "netcdf_filter.h",
            "netcdf_mem.h",
            "netcdf_meta.h"
        ],
        "build": [
            "mkdir -p /src/netcdf-c/build1",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} -DCMAKE_VERBOSE_MAKEFILE=ON  -DBUILD_SHARED_LIBS=OFF -DENABLE_HDF5=OFF -DENABLE_DAP=OFF ..",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "njs": {
        "headers": [
            "njs_main.h",
            "qjs.h",
	        "njs_value.h"
        ],
        "build": []
    },
    "oniguruma": {
        "headers": [
            "oniguruma.h",
            "oniggnu.h"
        ],
        "build": [
            "cd /src/oniguruma",
            "./autogen.sh",
            "./configure --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "cd -"
        ]
    },
    "openexr": {
        "headers": [
            "openexr.h"
        ],
        "build": [
            "mkdir -p /tmp/build",
            "cd /tmp/build",
            "CMAKE_SETTINGS=(",
            "  \"-D BUILD_SHARED_LIBS=OFF\"         # Build static libraries only",
            "  \"-D BUILD_TESTING=OFF\"             # Or tests",
            "  \"-D OPENEXR_INSTALL_EXAMPLES=OFF\"  # Or examples",
            "  \"-D OPENEXR_LIB_SUFFIX=\"           # Don't append the version number to library files",
            ")",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} $SRC/openexr ${CMAKE_SETTINGS[@]}",
            "make -j$(nproc)",
            "make install",
            "make clean",
            "cd -",
            "export CFLAGS=\"$CFLAGS -I /build_install_dir/include/Imath -I /build_install_dir/include/OpenEXR \"",
            "export CXXFLAGS=\"$CXXFLAGS -I /build_install_dir/include/Imath -I /build_install_dir/include/OpenEXR \""
        ]
    },
    "opusfile": {
        "headers": [
            "fcntl.h",
            "opus/opusfile.h"
        ],
        "build": [
            "./autogen.sh",
            "./configure --enable-static --disable-shared --disable-doc --enable-assertions --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make",
            "make install",
            "ldconfig",
            "make clean"
        ]
    },
    "ostree": {
        "headers": [
            "fcntl.h",
            "stdbool.h",
            "ostree.h"
        ],
        "build": [
            "# Build glib with sanitizer support",
            "cd glib",
            "mkdir build",
            "cd build",
            "meson --prefix=/usr --buildtype=release -Db_lundef=false -Ddefault_library=static -Dlibmount=disabled",
            "ninja",
            "ninja install",
            "cd ..",
            "rm -rf build",
            "# Build libostree",
            "cd $SRC/ostree",
            "env NOCONFIGURE=1 ./autogen.sh",
            "./configure --enable-static --without-selinux --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make V=1 install",
            "make clean",
            "cd /src"
        ]
    },
    "picotls": {
        "headers": [
            "picotls.h",
            "picotls/asn1.h",
            "picotls/ffx.h",
            "picotls/minicrypto.h",
            "picotls/pembase64.h",
            "picotls/certificate_compression.h",
            "picotls/fusion.h",
            "picotls/openssl.h",
            "picotls/ptlsbcrypt.h"
        ],
        "build": [
            "export LDFLAGS=\"${LDFLAGS} -lpthread \"",
            "pushd $SRC/picotls",
            "cmake --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} -DBUILD_FUZZER=ON -DOSS_FUZZ=ON .",
            "make",
            "make clean",
            "popd"
        ]
    },
    "pidgin": {
        "headers": [
            "purple.h"
        ],
        "build": [
            "# Place to keep dependencies for static linking",
            "DEPS=/deps",
            "mkdir -p ${DEPS}",
            "# Build libffi",
            "cd $SRC",
            "tar xvfz libffi-3.2.1.tar.gz",
            "cd libffi-3.2.1",
            "./configure --disable-shared",
            "make -j$(nproc)",
            "export LIBFFI_LIBS=\"-L/src/libffi-3.2.1 libraries/ -lffi\"",
            "cp ./x86_64-unknown-linux-gnu/.libs/libffi.a ${DEPS}/",
            "# Build libxml2",
            "cd $SRC/libxml2",
            "./autogen.sh \\",
            "    --disable-shared \\",
            "    --without-debug \\",
            "    --without-ftp \\",
            "    --without-http \\",
            "    --without-legacy \\",
            "    --without-python",
            "make -j$(nproc)",
            "make install",
            "cp .libs/libxml2.a ${DEPS}/",
            "# Build glib",
            "cd $SRC/glib",
            "GLIB_BUILD=$WORK/meson",
            "rm -rf $GLIB_BUILD",
            "mkdir $GLIB_BUILD",
            "meson $GLIB_BUILD \\",
            "  -Db_lundef=false \\",
            "  -Ddefault_library=static \\",
            "  -Dlibmount=disabled",
            "ninja -C $GLIB_BUILD",
            "ninja -C $GLIB_BUILD install",
            "cp ${GLIB_BUILD}/gobject/libgobject-2.0.a ${DEPS}/",
            "cp ${GLIB_BUILD}/gmodule/libgmodule-2.0.a ${DEPS}/",
            "cp ${GLIB_BUILD}/glib/libglib-2.0.a ${DEPS}/",
            "# Build Pidgin",
            "cd $SRC",
            "tar -xf pidgin-2.14.10.tar.bz2",
            "mv pidgin-2.14.10 pidgin",
            "cd pidgin",
            "./configure --disable-consoleui \\",
            "            --disable-shared \\",
            "            --disable-screensaver \\",
            "            --disable-sm \\",
            "            --disable-gtkspell \\",
            "            --disable-gevolution \\",
            "            --enable-gnutls=no \\",
            "            --disable-gstreamer \\",
            "            --disable-vv \\",
            "            --disable-idn \\",
            "            --disable-meanwhile \\",
            "            --disable-avahi \\",
            "            --disable-dbus \\",
            "            --disable-perl \\",
            "            --disable-tcl \\",
            "            --disable-cyrus-sasl \\",
            "            --disable-gtkui \\",
            "            --enable-nss=no --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make -j$(nproc) install",
            "make clean",
            "cd /src"
        ]
    },
    "pjsip": {
        "headers": [
            "pjlib-util.h",
            "pjlib.h",
            "pjmedia-codec.h",
            "pjmedia.h",
            "pjmedia_audiodev.h",
            "pjmedia_videodev.h",
            "pjnath.h",
            "pjsip.h",
            "pjsip_simple.h",
            "pjsip_ua.h",
            "pjsua.h"
        ],
        "build": [
            "./configure \\",
            "  --disable-ffmpeg --disable-ssl \\",
            "  --disable-speex-aec --disable-speex-codec \\",
            "  --disable-g7221-codec --disable-gsm-codec --disable-ilbc-codec \\",
            "  --disable-resample --disable-libsrtp --disable-libwebrtc --disable-libyuv --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make dep",
            "make --ignore-errors",
            "make install",
            "make clean"
        ]
    },
    "proftpd": {
        "headers": [
            "bindings.h",
            "class.h",
            "conf.h",
            "configdb.h",
            "ctrls.h",
            "dirtree.h",
            "error.h",
            "expr.h",
            "fsio.h",
            "inet.h",
            "jot.h",
            "json.h",
            "memcache.h",
            "mod_ctrls.h",
            "netaddr.h",
            "openbsd-blowfish.h",
            "os.h",
            "pr-syslog.h",
            "proftpd.h",
            "redis.h",
            "sets.h",
            "signals.h",
            "table.h",
            "version.h"
        ],
        "build": [
            "cd /src/proftpd",
            "export LDFLAGS=\"${CFLAGS} \"",
            "./configure --enable-ctrls --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make",
            "make clean",
            "cd -"
        ]
    },
    "pupnp": {
        "headers": [
            "list.h",
            "ixml.h",
            "ixmldebug.h"
        ],
        "build": [
            "mkdir -p tmp/build",
            "cd tmp/build",
            "cmake -DFUZZER=ON -DLIB_FUZZING_ENGINE=\"$LIB_FUZZING_ENGINE\" --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ../../",
            "make -j$(nproc)",
	    "make install",
            "make clean",
            "cd -"
        ]
    },
    "sleuthkit": {
        "headers": [
            "tsk/libtsk.h",
            "tsk/tsk_incs.h",
            "tsk/pool/tsk_apfs.h",
            "tsk/util/detect_encryption.h",
            "tsk/util/file_system_utils.h",
            "tsk/vs/tsk_dos.h",
            "tsk/vs/tsk_mac.h",
            "tsk/vs/tsk_gpt.h",
            "tsk/vs/tsk_bsd.h",
            "tsk/vs/tsk_sun.h",
            "tsk/img/logical_img.h",
            "tsk/base/tsk_os.h",
            "tsk/fs/tsk_exfatfs.h",
            "tsk/fs/tsk_yaffs.h",
            "tsk/fs/tsk_fatxxfs.h",
            "tsk/fs/tsk_logical_fs.h",
            "tsk/fs/tsk_apfs.h",
            "tsk/fs/tsk_ffs.h",
            "tsk/fs/tsk_fs.h",
            "tsk/fs/tsk_ntfs.h",
            "tsk/fs/apfs_fs.h",
            "tsk/fs/tsk_fatfs.h",
            "tsk/fs/decmpfs.h",
            "tsk/fs/tsk_ext2fs.h",
            "tsk/fs/tsk_hfs.h",
            "tsk/fs/tsk_iso9660.h"
        ],
        "build": [
            "export CFLAGS=\"$CFLAGS -Wno-error=non-c-typedef-for-linkage\"",
            "export CXXFLAGS=\"$CXXFLAGS -Wno-error=non-c-typedef-for-linkage\"",
            "# Disable error on all warnings",
            "sed -i 's/-Werror//g' ./tsk/util/Makefile.am",
            "sed -i 's/-Werror//g' ./tsk/pool/Makefile.am",
            "./bootstrap",
            "./configure --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}  --enable-static --disable-shared --disable-java --without-afflib --without-libewf --without-libvhdi --without-libvmdk",
            "make install",
            "make clean"
        ]
    },
    "tidy-html5": {
        "headers": [
            "tidybuffio.h",
            "stdio.h",
            "stdlib.h",
            "string.h",
            "stdint.h"
        ],
        "build": [
            "mkdir -p /src/tidy-html5/build1",
            "cd /src/tidy-html5/build1",
            "cmake -GNinja -DCMAKE_INSTALL_PREFIX=${HEADERFILES_CUSTOM_INSTALL_DIR} ${SRC}/tidy-html5/",
            "ninja",
            "ninja install",
            "cd -"
        ]
    },
    "unicorn": {
        "headers": [
	    "uc_priv.h"
        ],
        "build": [
            "mkdir -p /src/unicorn/build1",
            "cd /src/unicorn/build1",
            "cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=off --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make install",
            "make clean",
            "rm -rf /out/*",
            "find /src/unicorn/build1 -type f ! -name '*.a' -delete",
            "cd -",
            "rm -rf /src/unicorn/build1"
        ]
    },
    "unit": {
        "headers": [
            "nxt_main.h",
            "nxt_conf.h"
        ],
        "build": []
    },
    "utf8proc": {
        "headers": [
            "utf8proc.h"
        ],
        "build": [
            "mkdir -p /src/utf8proc/build1",
            "cd /src/utf8proc/build1",
            "cmake .. -DUTF8PROC_ENABLE_TESTING=ON -DLIB_FUZZING_ENGINE=\"$LIB_FUZZING_ENGINE\" --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "V=1 make install",
            "make clean",
            "cd -"
        ]
    },
    "vlc": {
        "headers": [
            "vlc/vlc.h"
        ],
        "build": [
            "cd /src/vlc",
            "# Use OSS-Fuzz environment rather than hardcoded setup.",
            "sed -i 's/-fsanitize-coverage=trace-pc-guard//g' ./configure.ac",
            "sed -i 's/-fsanitize-coverage=trace-cmp//g' ./configure.ac",
            "sed -i 's/-fsanitize-coverage=trace-pc//g' ./configure.ac",
            "sed -i 's/-lFuzzer//g'  ./configure.ac",
            "# In order to build statically we avoid libxml and ogg plugins.",
            "sed -i 's/..\\/..\\/lib\\/libvlc_internal.h/lib\\/libvlc_internal.h/g' ./test/src/input/decoder.c",
            "sed -i 's/..\\/modules\\/libxml_plugin.la//g' ./test/Makefile.am",
            "sed -i 's/..\\/modules\\/libogg_plugin.la//g' ./test/Makefile.am",
            "sed -i 's/f(misc_xml_xml)//g' ./test/src/input/demux-run.c",
            "sed -i 's/f(demux_ogg)//g' ./test/src/input/demux-run.c",
            "# Ensure that we compile with the correct link flags.",
            "RULE=vlc_demux_libfuzzer_LDADD",
            "FUZZ_LDFLAGS=\"vlc_demux_libfuzzer_LDFLAGS=\\${LIB_FUZZING_ENGINE}\"",
            "sed -i \"s/${RULE}/${FUZZ_LDFLAGS}\\n${RULE}/g\" ./test/Makefile.am",
            "RULE=vlc_demux_dec_libfuzzer_LDADD",
            "FUZZ_LDFLAGS=\"vlc_demux_dec_libfuzzer_LDFLAGS=\\${LIB_FUZZING_ENGINE}\"",
            "sed -i \"s/${RULE}/${FUZZ_LDFLAGS}\\n${RULE}/g\" ./test/Makefile.am",
            "./bootstrap",
            "./configure --disable-ogg --disable-oggspots --disable-libxml2 --disable-lua \\",
            "            --disable-shared \\",
            "            --enable-static \\",
            "            --enable-vlc=no \\",
            "            --disable-avcodec \\",
            "            --disable-swscale \\",
            "            --disable-a52 \\",
            "            --disable-xcb \\",
            "            --disable-alsa \\",
            "            --with-libfuzzer --prefix=${HEADERFILES_CUSTOM_INSTALL_DIR}",
            "make -j$(nproc) install",
            "make clean",
            "cd -"
        ]
    },
    "w3m": {
        "headers": [
            "stdlib.h",
	        "stdint.h",
	        "string.h",
	        "stddef.h"
        ],
        "build": []
    },
    "wasm3": {
        "headers": [
            "wasm3.h",
            "m3_api_libc.h"
        ],
        "build": []
    },
    "zydis": {
        "headers": [
            "Zydis/Decoder.h",
            "Zydis/DecoderTypes.h",
            "Zydis/Defines.h",
            "Zydis/Disassembler.h",
            "Zydis/Encoder.h",
            "Zydis/Formatter.h",
            "Zydis/FormatterBuffer.h",
            "Zydis/MetaInfo.h",
            "Zydis/Mnemonic.h",
            "Zydis/Register.h",
            "Zydis/Segment.h",
            "Zydis/SharedTypes.h",
            "Zydis/ShortString.h",
            "Zydis/Status.h",
            "Zydis/Utils.h",
            "Zydis/Zydis.h"
        ],
        "build": [
            "mkdir -p /src/zydis/build1",
            "cd /src/zydis/build1",
            "cmake                                       \\",
            "    -DZYAN_FORCE_ASSERTS=ON                 \\",
            "    -DZYDIS_BUILD_EXAMPLES=OFF              \\",
            "    -DZYDIS_BUILD_TOOLS=OFF                 \\",
            "    -DCMAKE_BUILD_TYPE=RelWithDebInfo       \\",
            "    \"-DCMAKE_C_COMPILER=${CC}\"              \\",
            "    \"-DCMAKE_CXX_COMPILER=${CXX}\"           \\",
            "    \"-DCMAKE_C_FLAGS=${CFLAGS}\"             \\",
            "    \"-DCMAKE_CXX_FLAGS=${CXXFLAGS}\"         \\",
            "    --install-prefix=${HEADERFILES_CUSTOM_INSTALL_DIR} ..",
            "make install",
            "make clean",
            "cd -"
        ]
    }
}
